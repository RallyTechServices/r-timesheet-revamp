<!DOCTYPE html>
<html>
<head>
    <title>TS Timesheet</title>
    <!--  (c) 2015,2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Wed Apr 27 2016 04:07:34 GMT+0200 (CEST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Wed Apr 27 2016 04:07:34 GMT+0200 (CEST)";
        var CHECKSUM = 97896842468;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.define('TSUtilities', {
    singleton: true,
    
    timeLockKeyPrefix: 'rally.technicalservices.timesheet.weeklock',
    approvalKeyPrefix: 'rally.technicalservices.timesheet.status',
    deletionKeyPrefix: 'rally.technicalservices.timesheet.deletion',
    pinKeyPrefix     : 'rally.technicalservices.timesheet.pin',

    archiveSuffix: '~archived',
    
    loadWsapiRecords: function(config,returnOperation){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    if ( returnOperation ) {
                        deferred.resolve(operation);
                    } else {
                        deferred.resolve(records);
                    }
                } else {
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    loadWsapiRecordsWithParallelPages: function(config, msg) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        
        var count_check_config = Ext.clone(config);
        count_check_config.limit = 1;
        count_check_config.pageSize = 1;
        count_check_config.fetch = ['ObjectID'];
        
        this.loadWsapiRecords(count_check_config, true).then({
            success: function(operation) {                
                config.pageSize = 200;
                config.limit = config.pageSize;
                var total = operation.resultSet.totalRecords;
                var page_count = Math.ceil(total/config.pageSize);
     
                var promises = [];
                Ext.Array.each(_.range(1,page_count+1), function(page_index) {
                    var config_clone = Ext.clone(config);
                    config_clone.currentPage = page_index;
                    promises.push(function() {
                        var percentage = parseInt( page_index * 100 / page_count, 10);
                        var message = msg || "Loading values";
                        Rally.getApp().setLoading(message + " (" + percentage + "%)");
                        return me.loadWsapiRecords(config_clone); 
                    });
                });
                CA.techservices.promise.ParallelThrottle.throttle(promises, 6, me).then({
                        success: function(results){
                            deferred.resolve( Ext.Array.flatten(results) );
                        },
                        failure: function(msg) {
                            deferred.reject(msg);
                        }
                });
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    getPreferenceProject: function() {
        var app = Rally.getApp();
        
        return app.getSetting('preferenceProjectRef');
    },
    
    isEditableProjectForCurrentUser: function(projectRef,scope) {
        var app = scope || Rally.getApp(),
            me = this;

        if ( this.currentUserIsAdmin(scope) ) {
            return true;
        }
        
        var project_oid = this._getOidFromRef(projectRef);
        var editor_permissions = Ext.Array.filter(app.getContext().getPermissions().userPermissions, function(permission){
            if ( permission.Role != "Editor" && permission.Role != "ProjectAdmin") {
                return false;
            }
            
            return ( me._getOidFromRef(permission._ref) == project_oid );
        });
        
        console.log(editor_permissions);
        return ( editor_permissions.length > 0 );
    },
    
    getEditableProjectForCurrentUser: function() {
        var app = Rally.getApp();
        if ( this._currentUserCanWrite() ) {
            return app.getContext().getProjectRef();
        }
        
        var workspace_oid = this._getOidFromRef( app.getContext().getWorkspaceRef());
        
        var editor_permissions = Ext.Array.filter(app.getContext().getPermissions().userPermissions, function(permission){
            if ( Ext.isEmpty(permission.Workspace) ) {
                return false;
            }
            var permission_oid = this._getOidFromRef(permission.Workspace);

            //console.log('comparing ', workspace_oid, permission_oid, permission);
            if (workspace_oid  !=  permission_oid) {
                return false;
            }
                        
            return ( permission.Role == "Editor" || permission.Role == "ProjectAdmin");
        },this);
        
        
        if ( editor_permissions.length > 0 ) {
            return editor_permissions[0]._ref;
        }
        return false;
    },
    
    _getOidFromRef: function(ref) {
        var ref_array = ref.replace(/\.js$/,'').split(/\//);
        return ref_array[ref_array.length-1].replace(/\.js/,'');
    },
    
    // true if sub or workspace admin
    currentUserIsAdmin: function(scope){
        var app = scope || Rally.getApp();
        
        console.log('current user:', app.getContext().getUser());
        if ( this.currentUserIsSubAdmin() ) {
            return true;
        }
        
        var permissions = app.getContext().getPermissions().userPermissions;

        var workspace_admin_list = Ext.Array.filter(permissions, function(p) {
            return ( p.Role == "Workspace Admin" || p.Role == "Subscription Admin");
        });
        
        var current_workspace_ref = app.getContext().getWorkspace()._ref;
        var is_workspace_admin = false;
                
        if ( workspace_admin_list.length > 0 ) {
            Ext.Array.each(workspace_admin_list, function(p){
                
                if (current_workspace_ref.replace(/\.js$/,'') == p._ref.replace(/\.js$/,'')) {
                    is_workspace_admin = true;
                }
            });
        }
        
        return is_workspace_admin;
    },
    
    currentUserIsSubAdmin: function(scope) {
        var app = scope || Rally.getApp();
                
        var permissions = app.getContext().getPermissions().userPermissions;

        var sub_admin_list = Ext.Array.filter(permissions, function(p) {
            return ( p.Role == 'Subscription Admin' );
        });
        
        return ( sub_admin_list.length > 0 );
    },
    
    _currentUserCanWrite: function() {
        var app = Rally.getApp();
        
        //console.log('_currentUserCanWrite',app.getContext().getUser(), app.getContext().getUser().SubscriptionAdmin);
        if ( app.getContext().getUser().SubscriptionAdmin ) {
            return true;
        }
        
        var permissions = app.getContext().getPermissions().userPermissions;

        var workspace_admin_list = Ext.Array.filter(permissions, function(p) {
            return ( p.Role == "Workspace Admin" || p.Role == "Subscription Admin");
        });
        
        var current_workspace_ref = app.getContext().getWorkspace()._ref;
        var can_unlock = false;
                
        if ( workspace_admin_list.length > 0 ) {
            Ext.Array.each(workspace_admin_list, function(p){
                
                if (current_workspace_ref.replace(/\.js$/,'') == p._ref.replace(/\.js$/,'')) {
                    can_unlock = true;
                }
            });
        }
        
        return can_unlock;
    },
    
    _currentUserCanUnapprove: function() {
        return this.currentUserIsAdmin();
    }
});
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('TSDateUtils', {
    singleton: true,
    
    getBeginningOfWeekForLocalDate: function(week_date,weekStartDay) {
        if ( Ext.isEmpty(weekStartDay) ) { weekStartDay = 0; }
        
        var dayInWeek = week_date.getDay();
        if ( week_date.getUTCHours() === 0 ) {
            // already in UTC
            dayInWeek = week_date.getUTCDay();
        }
        var delta = weekStartDay - dayInWeek;
        if ( dayInWeek < weekStartDay ) {
            delta = weekStartDay - dayInWeek - 7;
        }
                
        var start_of_week_here = Ext.Date.add(week_date, Ext.Date.DAY, delta);
        return start_of_week_here;
    },
    
    getBeginningOfWeekISOForLocalDate: function(week_date,showShiftedTimeStamp,weekStartDay) {
        if ( Ext.isEmpty(weekStartDay) ) {
            weekStartDay = 0;
        }
        
        var local_beginning = TSDateUtils.getBeginningOfWeekForLocalDate(week_date,weekStartDay);
        
        console.log('week_date', week_date, 'local_beginning', local_beginning, weekStartDay);
        if (showShiftedTimeStamp) {
            return Rally.util.DateTime.toIsoString(local_beginning).replace(/T.*$/,'T00:00:00.0Z');
        }

        if ( local_beginning.getUTCHours() === 0 ) {
            return Rally.util.DateTime.toIsoString(local_beginning,true).replace(/T.*$/,'');
        }
        return Rally.util.DateTime.toIsoString(local_beginning,false).replace(/T.*$/,'');
    },
    
    formatShiftedDate: function(jsdate,format) {
        var offset = jsdate.getTimezoneOffset();  // 480 is pacific, -330 is india

        if ( offset > 0 ) {
            jsdate = Rally.util.DateTime.add(jsdate,'minute',offset);
        }

        return Ext.util.Format.date(jsdate,format);
    },
    
    pretendIMeantUTC: function(jsdate,asUTC) {
        var offset = jsdate.getTimezoneOffset();
        
        if ( asUTC ) {
            return Rally.util.DateTime.toIsoString(jsdate).replace(/T.*$/,'T00:00:00.000Z');
        }
        var shiftedDate = Rally.util.DateTime.add(jsdate,'minute',-1 * offset);
        
        return shiftedDate;
    },
    
    // returns a promise, fulfills with a boolean
    isApproved: function(week_start_iso, user_oid) {
        var deferred = Ext.create('Deft.Deferred');
        
        var short_iso_date = week_start_iso;
        var key_user_oid = user_oid || Rally.getApp().getContext().getUser().ObjectID;
        
        var key = Ext.String.format("{0}.{1}.{2}", 
            TSUtilities.approvalKeyPrefix,
            short_iso_date,
            key_user_oid
        );
        
        this._loadWeekStatusPreference(key).then({
            success: function(preference) {
                if (preference.length === 0) { 
                    deferred.resolve(false);
                    return;
                }
                var value = preference[0].get('Value');
                if ( /{/.test(value) ) {
                    var status_object = Ext.JSON.decode(value);
                    if ( status_object.status == "Approved" ) { 
                        deferred.resolve(true);
                        return;
                    }
                }
                
                deferred.resolve(false);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        
        return deferred.promise;
    },
    
    _loadWeekStatusPreference: function(key) {
        
        var config = {
            model:'Preference',
            limit: 1,
            pageSize: 1,
            filters: [
                {property:'Name',operator: 'contains', value:key},
                {property:'Name',operator:'!contains',value: TSUtilities.archiveSuffix}
            ],
            fetch: ['Name','Value'],
            sorters: [{property:'CreationDate', direction: 'DESC'}]
        };
        
        return TSUtilities.loadWsapiRecords(config);
    }
});

Ext.define('TSArrowedDate',{
    extend: 'Ext.container.Container',
    alias: 'widget.tsarroweddate',
    
    layout: 'hbox',
    
    items: [
        {xtype:'rallybutton',itemId:'previous_button',cls:'secondary', ui: 'tsnav', text: '<<'},
        {xtype:'rallydatefield',itemId:'date_field'},
        {xtype:'rallybutton',itemId:'next_button',cls:'secondary', ui: 'tsnav', text: ' >>'}
    ],
    
    constructor: function (config) {
        this.mergeConfig(config);
        
        this.callParent([this.config]);
    },
    
    initComponent: function() {
        var me = this;
        
        this.callParent(arguments);
        
        this.addEvents(
            /**
             * @event
             * Fires when the grid has been rendered
             * @param {TSArrowedDate} datefield
             * @param {date} new value
             * @param {date} old value
             */
            'change'
        );
        
        if ( this.value ) { this.down('rallydatefield').setValue(value); }
        
        this.down('rallydatefield').on('change', this._onDateChanged, this);
        this.down('#previous_button').on('click', this._onPreviousButtonClicked, this);
        this.down('#next_button').on('click', this._onNextButtonClicked, this);
    },
    
    _onDateChanged: function(picker,new_value,old_value) {
        this.fireEvent('change',this,new_value,old_value);
    },
    
    setValue: function(value) {
        this.down('rallydatefield').setValue(value);
    },
    
    getValue: function() {
        return this.down('rallydatefield').getValue();
    },
    
    _onPreviousButtonClicked: function() {
        var value = this.getValue();
        if ( Ext.isEmpty(value) ) { return; }
        
        this.setValue(Rally.util.DateTime.add(value,'day',-7));
    },
    
    _onNextButtonClicked: function() {
        var value = this.getValue();
        if ( Ext.isEmpty(value) ) { return; }
        
        this.setValue(Rally.util.DateTime.add(value,'day',7));
    }
    
});
/**
 * A dialog that displays artifacts to choose from
 *
 */
Ext.define('Rally.technicalservices.ChooserDialog', {
    extend: 'Rally.ui.dialog.Dialog',
    alias:'widget.tschooserdialog',

    clientMetrics: [{
        beginEvent:'beforeshow',
        endEvent:'show',
        description:'dialog shown'
    }],

    width: 800,
    closable: true,

    searchContext: 'project',
    
    config: {
        /**
         * @cfg {String}
         * Title to give to the dialog
         */
        title: 'Choose an Artifact',
        /**
         * @cfg {Array} (required)
         * List of artifact types to allow the user to choose from
         */
        artifactTypes: [],
        /**
         * @cfg {Boolean}
         * Allow multiple selection or not
         */
        multiple: false,

        /**
         * @cfg {Object}
         * An {Ext.data.Store} config object used when building the grid
         * Handy when you need to limit the selection with store filters
         */
        storeConfig: { },

        /**
         * @cfg {Object}
         * The list of filter configs that will appear in the filter combobox
         * Each list element should include a displayName and an attributeName property,
         * where the attributeName is the name of wsapi queryable attribute:
         *     {
         *         displayName: 'Formatted ID',
         *         attributeName: 'FormattedID'
         *     }
         */
        filterableFields: [],

        /**
         * @cfg {Ext.grid.Column}
         * List of columns that will be used in the chooser
         */
        columns : [],

        /**
         * @cfg [{String}]
         * List of field names to fetch when getting the objects
         */
        fetchFields: [],
        
        /**
         * @cfg {String}
         * Text to be displayed on the button when selection is complete
         */
        selectionButtonText: 'Done',

        /**
         * @cfg {Object}
         * The grid configuration to be used when creative the grid of items in the dialog
         */
        gridConfig: {},

        /**
         * @cfg {String}
         * The ref of a record to select when the chooser loads
         */
        selectedRef: undefined

        /**
         * @private
         * @cfg userAction {String} (Optional)
         * The client metrics action to record when the user makes a selection and clicks done
         */
    },

    items: {
        xtype: 'panel',
        border: false,
        items: [
            {
                xtype: 'container',
                itemId: 'gridContainer',
                layout: 'fit',
                height: 400
            }
        ]
    },

    constructor: function(config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },

    initComponent: function() {
        this.callParent(arguments);
        this.addEvents(
            /**
             * @event artifactChosen
             * Fires when user clicks done after choosing an artifact
             * @param {Rally.technicalservices.ChooserDialog} this dialog
             * @param {Rally.domain.WsapiModel} selected record or an array of selected records if multiple is true
             */
            'artifactChosen'
        );

        this.addCls('chooserDialog');

        this._buildButtons();
        this._buildSearchBar();

        Rally.data.ModelFactory.getModels({
            types: this.artifactTypes,
            success: function(models) {

                if (this.artifactTypes.length > 1) {
                    this._setupComboBox(models);
                }

                this._buildGrid(models[this.artifactTypes[0]]);

            },
            scope: this
        });

    },

    /**
     * @private
     */
    _buildButtons: function() {

        this.down('panel').addDocked({
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '0 0 10 0',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [
                {
                    xtype: 'rallybutton',
                    text: this.selectionButtonText,
                    cls: 'primary small',
                    scope: this,
                    userAction: 'clicked done in dialog',
                    handler: function() {
                        var selectedRecords = this._getSelectedRecords();
                        if (!this.multiple) {
                            selectedRecords = selectedRecords[0];
                        }
                        this.fireEvent('artifactChosen', this, selectedRecords);
                        this.close();
                    }
                },
                {
                    xtype: 'rallybutton',
                    text: 'Cancel',
                    cls: 'secondary small',
                    handler: this.close,
                    scope: this,
                    ui: 'link'
                }
            ]
        });

    },

    /**
     * @private
     */
    _buildSearchBar: function() {

        var filterTypeComboBox = Ext.create('Ext.form.field.ComboBox', {
            itemId: 'filterTypeComboBox',
            queryMode: 'local',
            store: Ext.create('Ext.data.Store', {
                fields: ['attributeName', 'displayName'],
                data: this.filterableFields
            }),
            displayField: 'displayName',
            valueField: 'attributeName',
            editable: false
        });

        filterTypeComboBox.select(filterTypeComboBox.getStore().getAt(1));

        this.addDocked({
            xtype: 'toolbar',
            itemId: 'searchBar',
            dock: 'top',
            items: [
                filterTypeComboBox,
                {
                    xtype: 'textfield',
                    itemId: 'searchTerms',
                    emptyText: 'enter search terms',
                    flex: 1,
                    enableKeyEvents: true,
                    listeners: {
                        keyup: function(textField, event) {
                            if (event.getKey() === Ext.EventObject.ENTER) {
                                this._search();
                            }
                        },
                        scope: this
                    }
                },
                {
                    xtype: 'button',
                    text: '<span class="icon-search"> </span>',
                    handler: this._openSearchMenu,
                    scope: this
                }
            ]
        });
    },
    
    /**
     * @private
     * @param {Object} models Object with {Rally.domain.WsapiModel} items
     *
     */
    _setupComboBox: function(models) {
        var searchBar = this.down('#searchBar');
        var combo = Ext.create('Ext.form.field.ComboBox', {
            xtype: 'combo',
            name: 'filterType',
            queryMode: 'local',
            store: Ext.create('Ext.data.Store', {
                fields: ['typeName', 'displayName', 'wsapiModel']
            }),
            displayField: 'displayName',
            valueField: 'typeName',
            editable: false
        });
        searchBar.insert(0, combo);

        Ext.Object.each(models, function(key, model) {
            combo.getStore().add({
                typeName: model.typePath,
                displayName: model.displayName,
                wsapiModel: model
            });
        }, this);

        combo.select(combo.getStore().getAt(0));

        combo.on('select', function(comboBox, options) {
            var option = options[0];
            this.grid.reconfigureWithModel(option.get('wsapiModel'));
        }, this);

    },

    /**
     * @private
     * @param {Rally.domain.WsapiModel}
     *
     */
    _buildGrid: function(model) {

        var mode = this.multiple ? 'MULTI' : 'SINGLE';
        this.selectionModel = Ext.create('Rally.ui.selection.CheckboxModel', {
            mode: mode,
            allowDeselect: true
        });

        var store_config = this.storeConfig;
        store_config.context = { project: Rally.getApp().getContext().getProjectRef()};
        
        var new_fetch = Ext.Array.merge(['ObjectID'],this.fetchFields);
        var current_fetch = store_config.fetch || [];
        
        store_config.fetch = Ext.Array.merge(new_fetch,current_fetch);
        
        var gridConfig = Ext.Object.merge({
            model: model,
            selModel: this.selectionModel,
            autoAddAllModelFieldsAsColumns: false,
            enableEditing: false,
            enableColumnHide: false,
            enableColumnMove: false,
            columnCfgs: this.columns,
            storeConfig: store_config,
            showRowActionsColumn: false,
            viewConfig: {
                emptyText: Rally.ui.EmptyTextFactory.get('defaultText')
            }
        }, this.config.gridConfig);

        this.grid = Ext.create('Rally.ui.grid.Grid', gridConfig);
        this.mon(this.grid, 'load', this._onGridLoad, this);
        this.down('#gridContainer').add(this.grid);
        this._onGridReady();
    },

    _onGridReady: function() {
        if (!this.grid.rendered) {
            this.mon(this.grid, 'afterrender', this._onGridReady, this, {single: true});
            return;
        }

        if (this.grid.getStore().isLoading()) {
            this.mon(this.grid, 'load', this._onGridReady, this, {single: true});
            return;
        }

        this._onGridLoad();
        this.center();

        if (Rally.BrowserTest) {
            Rally.BrowserTest.publishComponentReady(this);
        }
    },

    _onGridLoad: function() {
        if(this.getSelectedRef()){
            var recordIndex = this.grid.getStore().find('_ref', this.getSelectedRef());
            if(recordIndex !== -1){
                var record = this.grid.getStore().getAt(recordIndex);
                this.grid.getSelectionModel().select(record);
            }
        }
    },

    /**
     * @private
     * @return {Rally.data.Model}
     */
    _getSelectedRecords: function() {
        return this.selectionModel.getSelection();
    },

    /**
     * @private
     */
    _search: function() {
        
        var terms = this.down('#searchTerms').getValue();
        var filterBy = this.down('#filterTypeComboBox').getValue();
        var filter;
        
        var store_config = this.grid.storeConfig;
        
        store_config.context = { project: Rally.getApp().getContext().getProjectRef() };
        
        if ( this.searchContext == "workspace" ) {
            store_config.context = { project: null };
        }
        
        var store = this.grid.getStore();        
        store.context = store_config.context;
        
        if (!Ext.isEmpty(terms)) {
            filter = Ext.create('Rally.data.wsapi.Filter', {
                property: filterBy,
                value: terms,
                operator: 'Contains'
            });
        }

        this.grid.filter(filter, true);
    },

    _openSearchMenu: function(button) {
        var menu = Ext.widget({
            xtype: 'rallymenu',
            items: [
                { 
                    text: 'Search Selected Project',
                    handler: function() {
                        this.searchContext = 'project';
                        this._search();
                    },
                    scope: this
                },
                { 
                    text: 'Search Everywhere',
                    handler: function() {
                        this.searchContext = 'workspace';
                        this._search();
                    },
                    scope: this
                }
            ]
        });
        menu.showBy(button.getEl());
        if(button.toolTip) {
            button.toolTip.hide();
        }
    }
});

Ext.define('CA.techservices.timesheet.TimeRowUtils',{
    singleton: true,
    
    daysInOrder: ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
    
    dayShortNames: {'Sunday':'Sun','Monday':'Mon','Tuesday':'Tues','Wednesday':'Wed','Thursday':'Thur','Friday':'Fri','Saturday':'Sat'},
    
    getDayOfWeekFromDate: function(jsdate) {
        if ( jsdate.getUTCHours() === 0 ) {
            return jsdate.getUTCDay();
        }
        return jsdate.getDay();
    },
    
    getDayOfWeek: function(value, record) {
        var week_start_date =  record.get('WeekStartDate');
        if ( Ext.isEmpty( week_start_date ) ) {
            return 0;
        }
        return CA.techservices.timesheet.TimeRowUtils.getDayOfWeekFromDate(week_start_date);
    },
    
    getFieldFromTimeEntryItems: function(value,record,field_name){
        if ( !Ext.isEmpty(value) ) { return value; }
        
        var teis = record.get('TimeEntryItemRecords');
        if ( Ext.isEmpty(teis) ) {
            return value;
        }
        
        if ( !Ext.isArray(teis) || teis.length === 0 ) {
            return value;
        }
        
        return teis[0].get(field_name);
    },
    
    getDayValueFromTimeEntryValues: function(value, record, day_name) {
        // if we're modifying this directly, don't take it from the TimeEntryValueRecords
        if ( !Ext.isEmpty(value) ) { return value; }
        
        var index = Ext.Array.indexOf(CA.techservices.timesheet.TimeRowUtils.daysInOrder, day_name);
        var week_start_date =  record.get('WeekStartDate');
        if ( Ext.isEmpty(week_start_date) ) { return 0; }
        
        var week_end_date = Rally.util.DateTime.add(week_start_date, 'week', 1);
        
        var time_entry_values = record.get('TimeEntryValueRecords');
        
        var day_value = 0;
        Ext.Array.each(time_entry_values, function(time_entry_value){
            var tev_day = time_entry_value.get('DateVal').getUTCDay();
            var tev_date = time_entry_value.get('DateVal');
            
            if ( tev_day == index && tev_date >= week_start_date && tev_date < week_end_date ) {
                day_value = time_entry_value.get('Hours');
            }
        });
        
        return day_value || 0;
    },
        
    getTotalFromDayValues: function(value, record) {
        var total = 0;
        Ext.Array.each(CA.techservices.timesheet.TimeRowUtils.daysInOrder, function(day) {
            var hours = record.get(day) || 0;
            total = total + hours;
        });
        
        return total;
    },
    
    getOrderedDaysBasedOnWeekStart: function(week_start_day) {
        if ( week_start_day === 0 ) { return CA.techservices.timesheet.TimeRowUtils.daysInOrder; }
        
        var standard_days = CA.techservices.timesheet.TimeRowUtils.daysInOrder;
        
        var first_days = Ext.Array.slice(standard_days, week_start_day, 7);
        var second_days = Ext.Array.slice(standard_days, 0, week_start_day);
                
        return Ext.Array.push(first_days, second_days);
    },
    
    getValueFromDayOfWeek: function(week_start_date, week_start_day, day_name) {
        var days_in_order = CA.techservices.timesheet.TimeRowUtils.getOrderedDaysBasedOnWeekStart(week_start_day);
        var index = Ext.Array.indexOf(days_in_order, day_name);
        
        return Rally.util.DateTime.add(week_start_date,'day',index);
    }
});

Ext.define('CA.techservices.timesheet.TimeRow',{
    extend: 'Ext.data.Model',

    fields: [
        { name: '__SecretKey', type:'string' },
        { name: 'Project',type: 'object', defaultValue: null, convert: 
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'Project');
            }
        },
        
        { name: 'Task', type:'object', defaultValue: null, convert: 
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'Task');
            }
        },
        { name: 'User', type:'object', defaultValue: null, convert: 
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'User');
            }
        },
        { name: 'WeekStartDate', type:'date' },
        { name: 'WorkProduct', type: 'object', defaultValue: null, convert: 
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'WorkProduct');
            }
        },
        // WeekStart: Day of Week (0=Sunday, 6=Saturday)
        { name: 'WeekStart', type: 'int', convert:  CA.techservices.timesheet.TimeRowUtils.getDayOfWeek },
        
        // store the AC records for saving/updating
        { name: 'TimeEntryItemRecords', type:'object', defaultValue: []},
        { name: 'TimeEntryValueRecords', type:'object', defaultValue: []},
        
        //
        { name: 'Sunday', type:'number', persist: true, 
            
            convert: function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getDayValueFromTimeEntryValues(value, record, 'Sunday');
            }
        },
        { name: 'Monday', type:'number', convert: 
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getDayValueFromTimeEntryValues(value, record, 'Monday');
            }
        },
        { name: 'Tuesday', type:'number', convert: 
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getDayValueFromTimeEntryValues(value, record, 'Tuesday');
            }
        },
        { name: 'Wednesday', type:'number', convert: 
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getDayValueFromTimeEntryValues(value, record, 'Wednesday');
            }
        },
        { name: 'Thursday', type:'number', convert: 
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getDayValueFromTimeEntryValues(value, record, 'Thursday');
            }
        },
        { name: 'Friday', type:'number', convert: 
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getDayValueFromTimeEntryValues(value, record, 'Friday');
            }
        },
        { name: 'Saturday', type:'number', convert: 
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getDayValueFromTimeEntryValues(value, record, 'Saturday');
            }
        },
        { name: 'Total', type: 'number', defaultValue: 0, convert: 
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getTotalFromDayValues(value, record);
            }
        }
    ],
    
    getWeekStartDates: function() {
        var day_of_week = this.get('WeekStart');
        var date_of_week = this.get('WeekStartDate');
        
        
        if (day_of_week === 0 ) {
            return [date_of_week];
        }
        
        var date1 = Rally.util.DateTime.add(date_of_week, 'day', -1 * day_of_week);
        var date2 = Rally.util.DateTime.add(date1, 'day', 7);
        
        return [date1, date2];
    },
    
    save: function(v) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this,
            changes = this.getChanges();
        
        var promises = [];
        Ext.Object.each(changes, function(field, value) {
            if ( Ext.Array.contains(CA.techservices.timesheet.TimeRowUtils.daysInOrder, field) ) {
                promises.push( function() { return me._changeDayValue(field,value); });
            }
        });
        
        return Deft.Chain.sequence(promises,this);
    },
    
    _changeDayValue: function(day, value) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
            
        var time_entry_value = this._getTimeEntryValue(day);
        
        if ( Ext.isEmpty(time_entry_value) ) {            
            return this._createTimeEntryValue(day,value);
        }
        
        time_entry_value.set('Hours',value);
        // recalculate total
        this.set('Total', 0);
        
        time_entry_value.save({
            callback: function(result) {
                deferred.resolve(result);
            }
        });
        
        return deferred.promise;
    },
    
    _getTimeEntryValue: function(day_name) {
        var index = Ext.Array.indexOf(CA.techservices.timesheet.TimeRowUtils.daysInOrder, day_name);
        var week_start_date =  this.get('WeekStartDate');
        var time_entry_values = this.get('TimeEntryValueRecords');
                
        var day_value = null;
        var value_date = CA.techservices.timesheet.TimeRowUtils.getValueFromDayOfWeek(this.get('WeekStartDate'), this.get('WeekStart'), day_name);
        
        Ext.Array.each(time_entry_values, function(time_entry_value){
            var delta = Rally.util.DateTime.getDifference(time_entry_value.get('DateVal'), value_date, 'day');
            
            if (delta === 0 ) {
                day_value = time_entry_value;
            }
        });
        
        return day_value;
    },
    
    _createTimeEntryValue: function(day_name, value) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        
        var value_date = CA.techservices.timesheet.TimeRowUtils.getValueFromDayOfWeek(this.get('WeekStartDate'), this.get('WeekStart'), day_name);
        var time_entry_item = null;
        Ext.Array.each(this.get('TimeEntryItemRecords'), function(item){
            var delta = Rally.util.DateTime.getDifference(value_date, item.get('WeekStartDate'), 'day');
            if ( value_date >= item.get('WeekStartDate') && delta < 7 ) {
                time_entry_item = item;
            }
        });
        
        if ( Ext.isEmpty(time_entry_item) ) {
            console.log('Could not find time entry item for date', value_date, this.get('TimeEntryItemRecords'));
            this._createTimeEntryItem(value_date, this.get('Project'), this.get('WorkProduct'), this.get('Task') ).then({
                scope: this,
                success: function(result) {
                    return this._createTimeEntryValueWithModel(day_name, value, value_date, result);
                },
                failure: function(msg) {
                    console.log("Problem creating new TEI", msg);
                    deferred.reject(msg);
                }
            });
            return deferred.promise;
        }
        
        return this._createTimeEntryValueWithModel(day_name, value, value_date, time_entry_item);
    },
    
    _createTimeEntryItem: function(value_date, project, workproduct, task) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        
        var sunday_start = TSDateUtils.getBeginningOfWeekISOForLocalDate(value_date);
        console.log("Creating TEI for week starting:", sunday_start, " (", value_date, ")");
        
        var config = {
            WeekStartDate: sunday_start,
            Project: { _ref: project._ref }
        };
        
        if ( !Ext.isEmpty(task) ) {
            config.Task = { _ref: task._ref };
        }
        
        if ( !Ext.isEmpty(workproduct) ) {
            config.WorkProduct = { _ref: workproduct._ref };
        }
        
        Rally.data.ModelFactory.getModel({
            type: 'TimeEntryItem',
            scope: this,
            success: function(model) {
                var tei = Ext.create(model,config);
                tei.save({
                    callback: function(result, operation) {
                        var records = me.get('TimeEntryItemRecords') || [];
                        records.push(result);
                        me.set('TimeEntryItemRecords', records);
                        deferred.resolve(result);
                    }
                });
            }
        });
        return deferred.promise;
    },
    
    _createTimeEntryValueWithModel: function(day_name, value, value_date, time_entry_item) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        
        Rally.data.ModelFactory.getModel({
            type: 'TimeEntryValue',
            scope: this,
            success: function(model) {
                this._changeFieldRights(model);
                
                var tev = Ext.create(model,{
                    Hours: value,
                    TimeEntryItem: { _ref: time_entry_item.get('_ref') },
                    DateVal: TSDateUtils.formatShiftedDate(value_date,'Y-m-d') + 'T00:00:00.000Z'
                });
                
                tev.save({
                    callback: function(result, operation) {
                        if(operation.wasSuccessful()) {
                            this.set(day_name, value);
                            
                            var records = me.get('TimeEntryValueRecords') || [];
                            records.push(result);
                            me.set('TimeEntryValueRecords', records);
                            
                            me.set('Total', 0); // updates the total automatically
                            deferred.resolve(result);    
                        } else {
                            me.set(day_name, 0);
                            console.log('Operation:',operation);
                            throw 'Problem saving time entry value';
                            deferred.reject(operation.error && operation.error.errors.join('.'));
                        }
                    }
                });
                
            }
        });
        return deferred.promise;
    },
    
    _changeFieldRights: function(model) {
        var fields = model.getFields();
        Ext.Array.each(fields, function(field,idx) {
            if ( field.name == "TimeEntryItem" ) {
                field.readOnly = false;
                field.persist = true;
                field.type = 'string';                        
            }
            if ( field.name == "DateVal" ) {
                // override field definition so that we can write to the 
                // field AND pass it a string for midnight at Z instead of
                // the local timestamp
                fields[idx] = Ext.create('Rally.data.wsapi.Field',{
                    type:'string',
                    readOnly: false,
                    persist: true,
                    name: 'DateVal',
                    custom: false,
                    hidden: false,
                    useNull: false
                });
            }
        });
        
        return model;
    }
});
Ext.override(Rally.ui.grid.plugin.Validation,{
    _onBeforeEdit: function(editor, object, eOpts) {
        // clear this because it won't let us do the getEditor on cells
    }
});

Ext.define('CA.techservices.TimeTable', {
    extend: 'Ext.Container',
    alias:  'widget.tstimetable',
    
    logger: new Rally.technicalservices.Logger(),
    
    rows: [],
    cls: 'tstimetable',
    
    time_entry_item_fetch: ['WeekStartDate','WorkProductDisplayString','WorkProduct','Task',
        'TaskDisplayString','Feature','Project', 'ObjectID', 'Name', 'Release', 'FormattedID'],
        
    config: {
        startDate: null,
        editable: true,
        timesheetUser: null
    },
    
    constructor: function (config) {
        this.mergeConfig(config);
        
        if (Ext.isEmpty(config.startDate) || !Ext.isDate(config.startDate)) {
            throw "CA.techservices.TimeTable requires startDate parameter (JavaScript Date)";
        }
        
        this.weekStart = CA.techservices.timesheet.TimeRowUtils.getDayOfWeekFromDate(this.startDate) || 0;
        
        this.callParent([this.config]);
    },
    
    initComponent: function() {
        var me = this;
        
        this.callParent(arguments);
        
        this.addEvents(
            /**
             * @event
             * Fires when the grid has been rendered
             * @param {CA.techservices.TimeTable } this
             * @param {Rally.ui.grid.Grid} grid
             */
            'gridReady'
        );
        
                
        if ( Ext.isEmpty(this.timesheetUser) ) {
            this.timesheetUser = Rally.getApp().getContext().getUser();
        }
        // shift start date
        this.startDate = TSDateUtils.pretendIMeantUTC(this.startDate);
        
        this._updateData();
    },
    
    _updateData: function() {
        this.setLoading('Loading time...');
        var me = this;
        
        
        Deft.Chain.sequence([
            this._loadTimeEntryItems,
            this._loadTimeEntryValues
        ],this).then({
            scope: this,
            success: function(results) {
                var time_entry_items  = results[0];
                var time_entry_values = results[1];
                
                this.rows = this._createRows(time_entry_items, time_entry_values);
                this._makeGrid(this.rows);
                this.setLoading(false);
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem Loading', msg);
            }
        });
    },
    
    _makeGrid: function(rows) {
        this.removeAll();
        var me = this,
            table_store = Ext.create('Rally.data.custom.Store',{
                groupField: '__SecretKey',
                model: 'CA.techservices.timesheet.TimeRow',
                data: rows,
                pageSize: 100
            });
            
        this.grid = this.add({ 
            xtype:'rallygrid', 
            store: table_store,
            columnCfgs: this._getColumns(),
            showPagingToolbar : false,
            showRowActionsColumn : false,
            sortableColumns: false,
            disableSelection: true,
            enableColumnMove: false,
            enableColumnResize : false,
            features: [{
                ftype: 'summary',
                startCollapsed: false,
                hideGroupedHeader: true,
                groupHeaderTpl: ' ',
                enableGroupingMenu: false
            }],

            viewConfig: {
                listeners: {
                    itemupdate: function(row, row_index) {
                        me.logger.log('itemupdate', row);
                    }
                }
            }
        });
        
        this.fireEvent('gridReady', this, this.grid);
    },
    
    _getColumns: function() {
        var me = this,
            columns = [];
        
        var columns = Ext.Array.push(columns,[
            {
                dataIndex: 'Project',
                text: 'Project',
                flex: 1,
                editor: null,
                renderer: function(value, meta, record) {
                    if ( Ext.isEmpty(value) ) {
                        return '--';
                    }
                    return value._refObjectName;
                }
            },
            {
                dataIndex: 'WorkProduct',
                text: 'Work Item',
                flex: 1,
                editor: null,
                renderer: function(value, meta, record) {
                    if ( Ext.isEmpty(value) ) {
                        return '--';
                    }
                    return Ext.String.format("<a target='_blank' href='{0}'>{1}</a>: {2}",
                        Rally.nav.Manager.getDetailUrl(value),
                        record.get('WorkProduct').FormattedID,
                        record.get('WorkProduct').Name
                    );;
                }
            },
            {
                dataIndex: 'Task',
                text: 'Task',
                flex: 1,
                editor: null,
                renderer: function(value, meta, record) {
                    if ( Ext.isEmpty(value) ) {
                        return '--';
                    }
                    return Ext.String.format("<a target='_blank' href='{0}'>{1}</a>: {2}",
                        Rally.nav.Manager.getDetailUrl(value),
                        record.get('Task').FormattedID,
                        record.get('Task').Name
                    );;
                }
            }
        ]);
        
        Ext.Array.each( CA.techservices.timesheet.TimeRowUtils.getOrderedDaysBasedOnWeekStart(this.weekStart), function(day,idx) {
            columns.push(this._getColumnForDay(day,idx));
        },this);
        
        var total_renderer = function(value, meta, record) {
            meta.tdCls = "ts-total-cell";
            return value;
        }; 
        
        columns.push({
            dataIndex:'Total',
            text:'Total', 
            width: 50, 
            resizable: false, 
            align: 'center',
            editor: null,
            summaryType: 'sum',
//            summaryRenderer: function(value,meta,record) {
//                if ( value < 40 ) {
//                    meta.style = 'background: #fec6cd;';
//                }
//                return value;
//            },
            renderer: total_renderer
        });
            
        return columns;
    },
    
    _getColumnForDay: function(day,idx) {
        var disabled = false;
        
        var editor_config = function(record,df) {
            var minValue = 0;
            return Ext.create('Ext.grid.CellEditor', {
                field: Ext.create('Rally.ui.NumberField', {
                    xtype:'rallynumberfield',
                    minValue: minValue,
                    maxValue: 24,
                    disabled: disabled,
                    selectOnFocus: true,
                    listeners: {
                        change: function(field, new_value, old_value) {
                            if ( Ext.isEmpty(new_value) ) {
                                field.setValue(0);
                            }
                            
                            console.log('change', day, new_value);
                            record.set(day, new_value);
                            record.save();
                        }
                    }
                })
            });
        };

        var header_text = Ext.String.format("{0}<br/>{1}",
            CA.techservices.timesheet.TimeRowUtils.dayShortNames[day],
            moment( Rally.util.DateTime.add(this.startDate,'day',idx) ).utc().format('D MMM')
        );
        
        var config = {
            dataIndex:day,
            html: header_text,
            width: 50, 
            resizable: false,
            align: 'center',
            getEditor: editor_config, 
            field: 'test',
            summaryType: 'sum',
            renderer: function(value,meta,record) {
                if ( value === 0 ) {
                    return "";
                } 
                return value;
            }
        };
        
        if ( day == "Saturday" || day == "Sunday" ) {
            config.renderer = function(value, meta, record) {
                meta.tdCls = "ts-weekend-cell";
                if ( value === 0 ) {
                    return "";
                }
                return value;
            };
        }
        
        return config;
    },
    
    _getTimeEntryItemSets: function(time_entry_items) {
        var time_entry_item_sets = {};
        Ext.Array.each(time_entry_items, function(item){
            var oid = item.get('Task') && item.get('Task').ObjectID;
            if ( Ext.isEmpty(oid) ) {
                oid = item.get('WorkProduct') && item.get('WorkProduct').ObjectID;
            }
            if ( Ext.isEmpty(oid) ) {
                oid = item.get('Project') && item.get('Project').ObjectID;
            }
            
            if ( Ext.isEmpty(time_entry_item_sets[oid]) ) {
                time_entry_item_sets[oid] = [];
            }
            time_entry_item_sets[oid].push(item);
        });
        
        return Ext.Object.getValues(time_entry_item_sets);
    },
    
    _createRows: function(time_entry_items, time_entry_values) {
        var rows = [],
            me = this;
        
        // in Rally, a time row has to start on Sunday, so we'll have up to two
        // time entry items for every row if the week starts on a different day
        var time_entry_item_sets = this._getTimeEntryItemSets(time_entry_items);
        
        Ext.Array.map(time_entry_item_sets, function(item_set){
            var item_values = [];
            
            Ext.Array.each(item_set, function(time_entry_item) {
                var oid = time_entry_item.get('ObjectID');
                var values_for_time_entry_item =  Ext.Array.filter(time_entry_values, function(time_entry_value){
                    return time_entry_value.get('TimeEntryItem').ObjectID == oid;
                });
                
                item_values = Ext.Array.push(item_values, values_for_time_entry_item);
            });
            
            rows.push(Ext.create('CA.techservices.timesheet.TimeRow',{
                WeekStartDate: me.startDate,
                TimeEntryItemRecords: item_set,
                TimeEntryValueRecords: item_values
            }));
        });
        
        return rows;
    },
    
    addRowForItem: function(item){
        var me = this,
            rows = this.rows;
        
        if ( this._hasRowForItem(item) ) {
            console.log("Has row already:", item);
            return;
        }
        
        console.log('Adding row for ', item);
        
        var item_type = item.get('_type');
        
        var sunday_start = TSDateUtils.getBeginningOfWeekISOForLocalDate(me.startDate);
        console.log("For table: Creating TEI for week starting:", sunday_start, " (", me.startDate, ")");
        
        var config = {
            WorkProduct: {
                _ref: item.get('_ref')
            },
            WeekStartDate: sunday_start,
            User: {
                _ref: '/usr/' + this.timesheetUser.ObjectID
            }
        };
        
        if ( item.get('Project') ) {
            config.Project = item.get("Project");
        }
        
        if ( item_type == "task" ) {
            config.Task = { _ref: item.get('_ref') };
            config.WorkProduct = { _ref: item.get('WorkProduct')._ref };
        }
        
        Rally.data.ModelFactory.getModel({
            type: 'TimeEntryItem',
            scope: this,
            success: function(model) {
                var tei = Ext.create(model,config);
                tei.save({
                    fetch: me.time_entry_item_fetch,
                    callback: function(result, operation) {
                        console.log('--', operation);
                        row = Ext.create('CA.techservices.timesheet.TimeRow',{
                            WeekStartDate: me.startDate,
                            TimeEntryItemRecords: [result],
                            TimeEntryValueRecords: []
                        });
                        
                        me.grid.getStore().loadRecords([row], { addRecords: true });
                        me.rows.push(row);
                    }
                });
            }
        });
    },
    
    getGrid: function() {
        return this.grid;
    },
    
    _hasRowForItem: function(item) {
        var me = this,
            rows = this.rows,
            hasRow = false,
            item_type = item.get('_type');
            
        var store_count = this.grid.getStore().data.items.length;
        
        Ext.Array.each(rows, function(row) {
            if ( row ) {
                if ( item_type == 'task' ) {
                    if ( row.get('Task') && row.get('Task')._ref == item.get('_ref') ) {
                        hasRow = true;
                    }
                } else {
                    if ( Ext.isEmpty(row.get('Task')) && row.get('WorkProduct') && row.get('WorkProduct')._ref == item.get('_ref') ) {
                        hasRow = true;
                    }
                }
            }
        });
        
        return hasRow;
    },
    
    _loadTimeEntryItems: function() {
        this.setLoading('Loading time entry items...');
        
        var filters = [{property:'User.ObjectID',value:this.timesheetUser.ObjectID}];
        
        if ( this.weekStart === 0 ) {
            filters.push({property:'WeekStartDate',value:this.startDate});
        } else {
            filters.push({property:'WeekStartDate', operator: '>=', value:Rally.util.DateTime.add(this.startDate, 'day', -6)});
            filters.push({property:'WeekStartDate', operator: '<=', value:Rally.util.DateTime.add(this.startDate,'day',6)});
        }
        
        var config = {
            model: 'TimeEntryItem',
            context: {
                project: null
            },
            fetch: this.time_entry_item_fetch,
            filters: filters
        };
        
        return TSUtilities.loadWsapiRecords(config);
    },
    
    _loadTimeEntryValues: function() {
        this.setLoading('Loading time entry values...');

        var filters = [{property:'TimeEntryItem.User.ObjectID',value:this.timesheetUser.ObjectID}];
        
        if ( this.weekStart === 0 ) {
            filters.push({property:'TimeEntryItem.WeekStartDate',value:this.startDate});
        } else {
            filters.push({property:'TimeEntryItem.WeekStartDate', operator: '>=', value:Rally.util.DateTime.add(this.startDate, 'day', -6)});
            filters.push({property:'TimeEntryItem.WeekStartDate', operator: '<=', value:Rally.util.DateTime.add(this.startDate,'day',6)});
        }
        
        var config = {
            model: 'TimeEntryValue',
            context: {
                project: null
            },
            fetch: ['DateVal','Hours','TimeEntryItem','ObjectID'],
            filters: filters
        };
        
        return TSUtilities.loadWsapiRecords(config);        
    }
});
Ext.define("TSTimesheet", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    layout: 'border',
    
    items: [
        {xtype:'container', itemId:'selector_box', region: 'north',  layout: { type:'hbox' }, minHeight: 25}
    ],

    integrationHeaders : {
        name : "TSTimesheet"
    },
    
    config: {
        defaultSettings: {
            /* 0=sunday, 6=saturday */
            weekStartsOn: 0 
        }
    },
    
    launch: function() {
        this._addSelectors(this.down('#selector_box'));
    },
    
    _addSelectors: function(container) {
        container.removeAll();
        container.add({xtype:'container',itemId:'button_box'});
        
        container.add({xtype:'container',flex: 1});
        
        var week_starts_on = this.getSetting('weekStartsOn');
        this.logger.log('Week Start:', week_starts_on);
        
        container.add({
            xtype:'tsarroweddate',
            itemId:'date_selector',
            fieldLabel: 'Week Starting',
            listeners: {
                scope: this,
                change: function(dp, new_value) {
                    if ( Ext.isEmpty(new_value) ) { return; }
                    
                    var week_start = TSDateUtils.getBeginningOfWeekForLocalDate(new_value,week_starts_on);
                    if ( week_start !== new_value ) {
                        dp.setValue(week_start);
                    }
                    if ( new_value.getDay() === week_starts_on ) {
                        this.updateData();
                    }
                }
            }
        }).setValue(new Date());
    },
    
    _addButtons: function(container) {
        container.removeAll();
        
        container.add({
            xtype:'rallybutton',
            text: 'Add My Tasks',
            toolTipText: "(in current iteration)", 
            padding: 2,
            disabled: false,
            listeners: {
                scope: this,
                click: this._addCurrentTasks
            }
        });
        
        container.add({
            xtype:'rallybutton',
            text: '+<span class="icon-task"> </span>',
            disabled: false,
            toolTipText: "Search and add Tasks", 
            listeners: {
                scope: this,
                click: this._findAndAddTask
            }
        });
        
        container.add({
            xtype:'rallybutton',
            text: '+<span class="icon-story"> </span>',
            toolTipText: "Search and add User Stories",
            disabled: false,
            listeners: {
                scope: this,
                click: this._findAndAddStory
            }
        });
        
    },
    
    _addCurrentTasks: function() {
        var timetable = this.down('tstimetable');
        if (timetable) {
            this.setLoading("Finding my current tasks...");
            
            var config = {
                model: 'Task',
                context: {
                    project: null
                },
                fetch:  ['ObjectID','Name','FormattedID','WorkProduct','Project'],
                filters: [
                    {property:'Owner.ObjectID',value:this.getContext().getUser().ObjectID},
                    {property:'Iteration.StartDate',operator: '<=', value:Rally.util.DateTime.toIsoString(this.startDate)},
                    {property:'Iteration.EndDate',  operator: '>=', value:Rally.util.DateTime.toIsoString(this.startDate)}
                ]
            };
            
            TSUtilities.loadWsapiRecords(config).then({
                scope: this,
                success: function(tasks) {
                    var new_item_count = tasks.length;
                    var current_count  = timetable.getGrid().getStore().getTotalCount();
                    
                    if ( current_count + new_item_count > 100 ) {
                        Ext.Msg.alert('Problem Adding Items', 'Cannot add items to grid. Limit is 100 lines in the time sheet.');
                        this.setLoading(false);
                    } else {
                        Ext.Array.each(tasks, function(task){
                            timetable.addRowForItem(task);
                        });
                    }
                    
                    this.setLoading(false);
                    
                },
                failure: function(msg) {
                    Ext.Msg.alert("Problem loading current tasks", msg);
                }
            });
        }
    },
    
    _findAndAddTask: function() {
        var timetable = this.down('tstimetable');
        
        var fetch_fields = ['WorkProduct','Feature','Project','Name','FormattedID','ObjectID'];
                
        if (timetable) {
            Ext.create('Rally.technicalservices.ChooserDialog', {
                artifactTypes: ['task'],
                autoShow: true,
                multiple: true,
                title: 'Choose Task(s)',
                filterableFields: [
                    {
                        displayName: 'Formatted ID',
                        attributeName: 'FormattedID'
                    },
                    {
                        displayName: 'Name',
                        attributeName: 'Name'
                    },
                    {
                        displayName:'WorkProduct',
                        attributeName: 'WorkProduct.Name'
                    },
                    {
                        displayName:'Release',
                        attributeName: 'Release.Name'
                    },
                    {
                        displayName:'Project',
                        attributeName: 'Project.Name'
                    },
                    {
                        displayName:'Owner',
                        attributeName: 'Owner'
                    },
                    {
                        displayName: 'State',
                        attributeName: 'State'
                    }
                ],
                columns: [
                    {
                        text: 'ID',
                        dataIndex: 'FormattedID'
                    },
                    'Name',
                    'WorkProduct',
                    'Release',
                    'Project',
                    'Owner',
                    'State'
                ],
                fetchFields: fetch_fields,
                listeners: {
                    artifactchosen: function(dialog, selectedRecords){
                        if ( !Ext.isArray(selectedRecords) ) {
                            selectedRecords = [selectedRecords];
                        }
                        
                        var new_item_count = selectedRecords.length;
                        var current_count  = timetable.getGrid().getStore().getTotalCount();
                        
                        if ( current_count + new_item_count > 100 ) {
                            Ext.Msg.alert('Problem Adding Tasks', 'Cannot add items to grid. Limit is 100 lines in the time sheet.');
                        } else {
                            
                            Ext.Array.each(selectedRecords, function(selectedRecord){
                                timetable.addRowForItem(selectedRecord);
                            });
                        }
                    },
                    scope: this
                }
             });
        }
    },
    
    _findAndAddStory: function() {
        var timetable = this.down('tstimetable');
        if (timetable) {
            Ext.create('Rally.technicalservices.ChooserDialog', {
                artifactTypes: ['hierarchicalrequirement'],
                autoShow: true,
                title: 'Choose Story(ies)',
                multiple: true,
                filterableFields: [
                    {
                        displayName: 'Formatted ID',
                        attributeName: 'FormattedID'
                    },
                    {
                        displayName: 'Name',
                        attributeName: 'Name'
                    },
                    {
                        displayName:'Feature',
                        attributeName: 'Feature.Name'
                    },
                    {
                        displayName: 'Feature Project',
                        attributeName: 'Feature.Project.Name'
                    },
                    {
                        displayName:'Release',
                        attributeName: 'Release.Name'
                    },
                    {
                        displayName:'Project',
                        attributeName: 'Project.Name'
                    },
                    {
                        displayName:'Owner',
                        attributeName: 'Owner'
                    },
                    {
                        displayName:'State',
                        attributeName: 'ScheduleState'
                    }
                ],
                columns: [
                    {
                        text: 'ID',
                        dataIndex: 'FormattedID'
                    },
                    'Name',
                    'WorkProduct',
                    'Release',
                    'Project',
                    'Owner',
                    'ScheduleState'
                ],
        
                fetchFields: ['WorkProduct','Feature','Project','Name','FormattedID','ObjectID','Release'],
                
                listeners: {
                    artifactchosen: function(dialog, selectedRecords){
                        if ( !Ext.isArray(selectedRecords) ) {
                            selectedRecords = [selectedRecords];
                        }
                        
                        var new_item_count = selectedRecords.length;
                        var current_count  = timetable.getGrid().getStore().getTotalCount();
                        
                        if ( current_count + new_item_count > 100 ) {
                            Ext.Msg.alert('Problem Adding Stories', 'Cannot add items to grid. Limit is 100 lines in the time sheet.');
                        } else {
                            Ext.Array.each(selectedRecords, function(selectedRecord){
                                timetable.addRowForItem(selectedRecord);
                            });
                        }
                    },
                    scope: this
                }
             });
        }
    },
    
    updateData: function() {
        var me = this;
        var timetable  = this.down('tstimetable');
        if ( ! Ext.isEmpty(timetable) ) { timetable.destroy(); }
        
        this.startDate = this.down('#date_selector').getValue();
        
        this.logger.log('startDate', this.startDate);
        
        var editable = true;
        
        this.time_table = this.add({ 
            xtype: 'tstimetable',
            region: 'center',
            layout: 'fit',
            margin: 15,
            startDate: this.startDate,
            editable: editable,
            listeners: {
                scope: this,
                gridReady: function() {
                    this._addButtons(this.down('#button_box'));
                }
            }
        });
    },

    getSettingsFields: function() {
        var days_of_week = [
            {Name:'Sunday', Value:0},
            {Name:'Monday', Value:1},
            {Name:'Tuesday', Value:2},
            {Name:'Wednesday', Value:3},
            {Name:'Thursday', Value:4},
            {Name:'Friday', Value:5},
            {Name:'Saturday', Value:6}
        ];
        
        return [{
            name: 'weekStartsOn',
            xtype: 'rallycombobox',
            fieldLabel: 'Week Starts On',
            labelWidth: 100,
            labelAlign: 'left',
            minWidth: 200,
            displayField:'Name',
            valueField: 'Value',
            value: this.getSetting('weekStartsOn'),
            store: Ext.create('Rally.data.custom.Store',{
                data: days_of_week
            }),
            readyEvent: 'ready'
        }];
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('TSTimesheet', {
                   name: 'TS Timesheet'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
.x-btn-tsnav-small {
    background-image: none;
    background-color: white;
    border-color: white !important;
    text-decoration: none;
}
td.ts-total-cell {
    background-color: #eee !important;
}

.x-grid-row-summary {
    background-color: #eee;
}

.x-grid-row-alt .x-grid-td {
    background-color: #fff;
}

.x-border-layout-ct {
    background-color: #ffffff;
}

td.ts-weekend-cell {
    background-color: #B0E0E6 !important;
}

span.red {
    color: red;
}
    </style>

</head>
<body></body>
</html>