<!DOCTYPE html>
<html>
<head>
    <title>CATS-Timesheet-1.2</title>
    <!--  (c) 2015,2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Tue Sep 25 2018 15:37:29 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Tue Sep 25 2018 15:37:29 GMT-0700 (PDT)";
        var CHECKSUM = 462961198340;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.define('TSUtilities', {
    singleton: true,
    
    timeLockKeyPrefix: 'rally.technicalservices.timesheet.weeklock',
    approvalKeyPrefix: 'rally.technicalservices.timesheet.status',
    deletionKeyPrefix: 'rally.technicalservices.timesheet.deletion',
    pinKeyPrefix     : 'rally.technicalservices.timesheet.pin',

    archiveSuffix: '~archived',
    
    loadWsapiRecords: function(config,returnOperation){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    if ( returnOperation ) {
                        deferred.resolve(operation);
                    } else {
                        deferred.resolve(records);
                    }
                } else {
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    loadWsapiRecordsWithParallelPages: function(config, msg) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        
        var count_check_config = Ext.clone(config);
        count_check_config.limit = 1;
        count_check_config.pageSize = 1;
        count_check_config.fetch = ['ObjectID'];
        
        this.loadWsapiRecords(count_check_config, true).then({
            success: function(operation) {                
                config.pageSize = 200;
                config.limit = config.pageSize;
                var total = operation.resultSet.totalRecords;
                var page_count = Math.ceil(total/config.pageSize);
     
                var promises = [];
                Ext.Array.each(_.range(1,page_count+1), function(page_index) {
                    var config_clone = Ext.clone(config);
                    config_clone.currentPage = page_index;
                    promises.push(function() {
                        var percentage = parseInt( page_index * 100 / page_count, 10);
                        var message = msg || "Loading values";
                        Rally.getApp().setLoading(message + " (" + percentage + "%)");
                        return me.loadWsapiRecords(config_clone); 
                    });
                });
                CA.techservices.promise.ParallelThrottle.throttle(promises, 6, me).then({
                        success: function(results){
                            deferred.resolve( Ext.Array.flatten(results) );
                        },
                        failure: function(msg) {
                            deferred.reject(msg);
                        }
                });
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    getPreferenceProject: function() {
        var app = Rally.getApp();
        
        return app.getSetting('preferenceProjectRef');
    },
    
    isEditableProjectForCurrentUser: function(projectRef,scope) {
        var app = scope || Rally.getApp(),
            me = this;

        if ( this.currentUserIsAdmin(scope) ) {
            return true;
        }
        
        var project_oid = this._getOidFromRef(projectRef);
        var editor_permissions = Ext.Array.filter(app.getContext().getPermissions().userPermissions, function(permission){
            if ( permission.Role != "Editor" && permission.Role != "ProjectAdmin") {
                return false;
            }
            
            return ( me._getOidFromRef(permission._ref) == project_oid );
        });
        
        console.log(editor_permissions);
        return ( editor_permissions.length > 0 );
    },
    
    getEditableProjectForCurrentUser: function() {
        var app = Rally.getApp();
        if ( this._currentUserCanWrite() ) {
            return app.getContext().getProjectRef();
        }
        
        var workspace_oid = this._getOidFromRef( app.getContext().getWorkspaceRef());
        
        var editor_permissions = Ext.Array.filter(app.getContext().getPermissions().userPermissions, function(permission){
            if ( Ext.isEmpty(permission.Workspace) ) {
                return false;
            }
            var permission_oid = this._getOidFromRef(permission.Workspace);

            //console.log('comparing ', workspace_oid, permission_oid, permission);
            if (workspace_oid  !=  permission_oid) {
                return false;
            }
                        
            return ( permission.Role == "Editor" || permission.Role == "ProjectAdmin");
        },this);
        
        
        if ( editor_permissions.length > 0 ) {
            return editor_permissions[0]._ref;
        }
        return false;
    },
    
    _getOidFromRef: function(ref) {
        var ref_array = ref.replace(/\.js$/,'').split(/\//);
        return ref_array[ref_array.length-1].replace(/\.js/,'');
    },
    
    // true if sub or workspace admin
    currentUserIsAdmin: function(scope){
        var app = scope || Rally.getApp();
        
        console.log('current user:', app.getContext().getUser());
        if ( this.currentUserIsSubAdmin() ) {
            return true;
        }
        
        var permissions = app.getContext().getPermissions().userPermissions;

        var workspace_admin_list = Ext.Array.filter(permissions, function(p) {
            return ( p.Role == "Workspace Admin" || p.Role == "Subscription Admin");
        });
        
        var current_workspace_ref = app.getContext().getWorkspace()._ref;
        var is_workspace_admin = false;
                
        if ( workspace_admin_list.length > 0 ) {
            Ext.Array.each(workspace_admin_list, function(p){
                
                if (current_workspace_ref.replace(/\.js$/,'') == p._ref.replace(/\.js$/,'')) {
                    is_workspace_admin = true;
                }
            });
        }
        
        return is_workspace_admin;
    },
    
    currentUserIsSubAdmin: function(scope) {
        var app = scope || Rally.getApp();
                
        var permissions = app.getContext().getPermissions().userPermissions;

        var sub_admin_list = Ext.Array.filter(permissions, function(p) {
            return ( p.Role == 'Subscription Admin' );
        });
        
        return ( sub_admin_list.length > 0 );
    },
    
    _currentUserCanWrite: function() {
        var app = Rally.getApp();
        
        //console.log('_currentUserCanWrite',app.getContext().getUser(), app.getContext().getUser().SubscriptionAdmin);
        if ( app.getContext().getUser().SubscriptionAdmin ) {
            return true;
        }
        
        var permissions = app.getContext().getPermissions().userPermissions;

        var workspace_admin_list = Ext.Array.filter(permissions, function(p) {
            return ( p.Role == "Workspace Admin" || p.Role == "Subscription Admin");
        });
        
        var current_workspace_ref = app.getContext().getWorkspace()._ref;
        var can_unlock = false;
                
        if ( workspace_admin_list.length > 0 ) {
            Ext.Array.each(workspace_admin_list, function(p){
                
                if (current_workspace_ref.replace(/\.js$/,'') == p._ref.replace(/\.js$/,'')) {
                    can_unlock = true;
                }
            });
        }
        
        return can_unlock;
    },
    
    _currentUserCanUnapprove: function() {
        return this.currentUserIsAdmin();
    },
    
    fetchPortfolioItemTypes: function() {
        var config = {
            model: 'TypeDefinition', 
            fetch: ["TypePath","Ordinal","Name"],
            filters: [{property:'TypePath', operator:'contains', value:'PortfolioItem/'}],
            sorters: [{property:'Ordinal',direction:'ASC'}]
        };
        
        return TSUtilities.loadWsapiRecords(config);
    },

    fetchField: function(modelName,fieldName){
        var deferred = Ext.create('Deft.Deferred');
        Rally.data.ModelFactory.getModel({
            type: modelName,
            success: function(model) {
                deferred.resolve(model.getField(fieldName));
            },
            failure: function() {
                var error = "Could not load schedule states";
                deferred.reject(error);
            }
        });
        return deferred.promise;
    },

});
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    
    saveForLater: false,
    logText: null,
    
    constructor: function(config){
        Ext.apply(this,config);
    },
    
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        if ( this.saveForLater ) {
            if ( !this.logText ) { 
                this.logText = "";
            } else {
                this.logText = this.logText + '<br/>';
            }
            
            this.logText = this.logText + output_args.join(' ');
            
                
        }
        window.console && console.log.apply(console,output_args);
    },
    
    getLogText: function() {
        return this.logText;
    }

});

Ext.define('TSDateUtils', {
    singleton: true,
    
    getBeginningOfWeekForLocalDate: function(week_date,weekStartDay) {
        if ( Ext.isEmpty(weekStartDay) ) { weekStartDay = 0; }
        
        var dayInWeek = week_date.getDay();
        if ( week_date.getUTCHours() === 0 ) {
            // already in UTC
            dayInWeek = week_date.getUTCDay();
        }
        var delta = weekStartDay - dayInWeek;
        if ( dayInWeek < weekStartDay ) {
            delta = weekStartDay - dayInWeek - 7;
        }
                
        var start_of_week_here = Ext.Date.add(week_date, Ext.Date.DAY, delta);
        return start_of_week_here;
    },
    
    getBeginningOfWeekISOForLocalDate: function(week_date,showShiftedTimeStamp,weekStartDay) {
        if ( Ext.isEmpty(weekStartDay) ) {
            weekStartDay = 0;
        }
        
        var local_beginning = TSDateUtils.getBeginningOfWeekForLocalDate(week_date,weekStartDay);
        
        if (showShiftedTimeStamp) {
            return Rally.util.DateTime.toIsoString(local_beginning).replace(/T.*$/,'T00:00:00.0Z');
        }

        if ( local_beginning.getUTCHours() === 0 ) {
            return Rally.util.DateTime.toIsoString(local_beginning,true).replace(/T.*$/,'');
        }
        return Rally.util.DateTime.toIsoString(local_beginning,false).replace(/T.*$/,'');
    },
    
    formatShiftedDate: function(jsdate,format) {
        var offset = jsdate.getTimezoneOffset();  // 480 is pacific, -330 is india

        if ( offset > 0 ) {
            jsdate = Rally.util.DateTime.add(jsdate,'minute',offset);
        }

        return Ext.util.Format.date(jsdate,format);
    },
    
    pretendIMeantUTC: function(jsdate,asUTC) {
        var offset = jsdate.getTimezoneOffset();
        
        if ( asUTC ) {
            return Rally.util.DateTime.toIsoString(jsdate).replace(/T.*$/,'T00:00:00.000Z');
        }
        var shiftedDate = Rally.util.DateTime.add(jsdate,'minute',-1 * offset);
        
        return shiftedDate;
    },
    
    // returns a promise, fulfills with a boolean
    isApproved: function(week_start_iso, user_oid) {
        var deferred = Ext.create('Deft.Deferred');
        
        var short_iso_date = week_start_iso;
        var key_user_oid = user_oid || Rally.getApp().getContext().getUser().ObjectID;
        
        var key = Ext.String.format("{0}.{1}.{2}", 
            TSUtilities.approvalKeyPrefix,
            short_iso_date,
            key_user_oid
        );
        
        this._loadWeekStatusPreference(key).then({
            success: function(preference) {
                if (preference.length === 0) { 
                    deferred.resolve(false);
                    return;
                }
                var value = preference[0].get('Value');
                if ( /{/.test(value) ) {
                    var status_object = Ext.JSON.decode(value);
                    if ( status_object.status == "Approved" ) { 
                        deferred.resolve(true);
                        return;
                    }
                }
                
                deferred.resolve(false);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        
        return deferred.promise;
    },
    
    _loadWeekStatusPreference: function(key) {
        
        var config = {
            model:'Preference',
            limit: 1,
            pageSize: 1,
            filters: [
                {property:'Name',operator: 'contains', value:key},
                {property:'Name',operator:'!contains',value: TSUtilities.archiveSuffix}
            ],
            fetch: ['Name','Value'],
            sorters: [{property:'CreationDate', direction: 'DESC'}]
        };
        
        return TSUtilities.loadWsapiRecords(config);
    }
});

Ext.define('TSArrowedDate',{
    extend: 'Ext.container.Container',
    alias: 'widget.tsarroweddate',
    
    layout: 'hbox',
    
    items: [
        {xtype:'rallybutton',itemId:'previous_button',cls:'secondary', ui: 'tsnav', text: '<<'},
        {xtype:'rallydatefield',itemId:'date_field'},
        {xtype:'rallybutton',itemId:'next_button',cls:'secondary', ui: 'tsnav', text: ' >>'}
    ],
    
    constructor: function (config) {
        this.mergeConfig(config);
        
        this.callParent([this.config]);
    },
    
    initComponent: function() {
        var me = this;
        
        this.callParent(arguments);
        
        this.addEvents(
            /**
             * @event
             * Fires when the grid has been rendered
             * @param {TSArrowedDate} datefield
             * @param {date} new value
             * @param {date} old value
             */
            'change'
        );
        
        if ( this.value ) { this.down('rallydatefield').setValue(value); }
        
        this.down('rallydatefield').on('change', this._onDateChanged, this);
        this.down('#previous_button').on('click', this._onPreviousButtonClicked, this);
        this.down('#next_button').on('click', this._onNextButtonClicked, this);
    },
    
    _onDateChanged: function(picker,new_value,old_value) {
        this.fireEvent('change',this,new_value,old_value);
    },
    
    setValue: function(value) {
        this.down('rallydatefield').setValue(value);
    },
    
    getValue: function() {
        return this.down('rallydatefield').getValue();
    },
    
    _onPreviousButtonClicked: function() {
        var value = this.getValue();
        if ( Ext.isEmpty(value) ) { return; }
        
        this.setValue(Rally.util.DateTime.add(value,'day',-7));
    },
    
    _onNextButtonClicked: function() {
        var value = this.getValue();
        if ( Ext.isEmpty(value) ) { return; }
        
        this.setValue(Rally.util.DateTime.add(value,'day',7));
    }
    
});
/**
 * A dialog that displays artifacts to choose from
 *
 */
Ext.define('Rally.technicalservices.ChooserDialog', {
    extend: 'Rally.ui.dialog.Dialog',
    alias:'widget.tschooserdialog',

    clientMetrics: [{
        beginEvent:'beforeshow',
        endEvent:'show',
        description:'dialog shown'
    }],

    width: 800,
    closable: true,

    searchContext: 'project',
    
    config: {
        /**
         * @cfg {String}
         * Title to give to the dialog
         */
        title: 'Choose an Artifact',
        /**
         * @cfg {Array} (required)
         * List of artifact types to allow the user to choose from
         */
        artifactTypes: [],
        /**
         * @cfg {Boolean}
         * Allow multiple selection or not
         */
        multiple: false,

        /**
         * @cfg {Object}
         * An {Ext.data.Store} config object used when building the grid
         * Handy when you need to limit the selection with store filters
         */
        storeConfig: { },

        /**
         * @cfg {Object}
         * The list of filter configs that will appear in the filter combobox
         * Each list element should include a displayName and an attributeName property,
         * where the attributeName is the name of wsapi queryable attribute:
         *     {
         *         displayName: 'Formatted ID',
         *         attributeName: 'FormattedID'
         *     }
         */
        filterableFields: [],

        /**
         * @cfg {Ext.grid.Column}
         * List of columns that will be used in the chooser
         */
        columns : [],

        /**
         * @cfg [{String}]
         * List of field names to fetch when getting the objects
         */
        fetchFields: [],
        
        /**
         * @cfg {String}
         * Text to be displayed on the button when selection is complete
         */
        selectionButtonText: 'Done',

        /**
         * @cfg {Object}
         * The grid configuration to be used when creative the grid of items in the dialog
         */
        gridConfig: {},

        /**
         * @cfg {String}
         * The ref of a record to select when the chooser loads
         */
        selectedRef: undefined

        /**
         * @private
         * @cfg userAction {String} (Optional)
         * The client metrics action to record when the user makes a selection and clicks done
         */
    },

    items: {
        xtype: 'panel',
        border: false,
        items: [
            {
                xtype: 'container',
                itemId: 'gridContainer',
                layout: 'fit',
                height: 400
            }
        ]
    },

    constructor: function(config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },

    initComponent: function() {
        this.callParent(arguments);
        this.addEvents(
            /**
             * @event artifactChosen
             * Fires when user clicks done after choosing an artifact
             * @param {Rally.technicalservices.ChooserDialog} this dialog
             * @param {Rally.domain.WsapiModel} selected record or an array of selected records if multiple is true
             */
            'artifactChosen'
        );

        this.addCls('chooserDialog');

        this._buildButtons();
        this._buildSearchBar();

        Rally.data.ModelFactory.getModels({
            types: this.artifactTypes,
            success: function(models) {

                this.models = models;
                
                if (this.artifactTypes.length > 1) {
                    this._setupComboBox(models);
                }

                this._buildGrid(models[this.artifactTypes[0]]);

            },
            scope: this
        });

    },

    /**
     * @private
     */
    _buildButtons: function() {

        this.down('panel').addDocked({
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '0 0 10 0',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [
                {
                    xtype: 'rallybutton',
                    text: this.selectionButtonText,
                    cls: 'primary small',
                    scope: this,
                    userAction: 'clicked done in dialog',
                    handler: function() {
                        var selectedRecords = this._getSelectedRecords();
                        if (!this.multiple) {
                            selectedRecords = selectedRecords[0];
                        }
                        this.fireEvent('artifactChosen', this, selectedRecords);
                        this.close();
                    }
                },
                {
                    xtype: 'rallybutton',
                    text: 'Cancel',
                    cls: 'secondary small',
                    handler: this.close,
                    scope: this,
                    ui: 'link'
                }
            ]
        });

    },

    /**
     * @private
     */
    _buildSearchBar: function() {

        var filterTypeComboBox = Ext.create('Ext.form.field.ComboBox', {
            itemId: 'filterTypeComboBox',
            queryMode: 'local',
            store: Ext.create('Ext.data.Store', {
                fields: ['attributeName', 'displayName'],
                data: this.filterableFields
            }),
            displayField: 'displayName',
            valueField: 'attributeName',
            editable: false
        });

        filterTypeComboBox.select(filterTypeComboBox.getStore().getAt(1));

        this.addDocked({
            xtype: 'toolbar',
            itemId: 'searchBar',
            dock: 'top',
            items: [
                filterTypeComboBox,
                {
                    xtype: 'textfield',
                    itemId: 'searchTerms',
                    emptyText: 'enter search terms',
                    flex: 1,
                    enableKeyEvents: true,
                    listeners: {
                        keyup: function(textField, event) {
                            if (event.getKey() === Ext.EventObject.ENTER) {
                                this._search();
                            }
                        },
                        scope: this
                    }
                },
                {
                    xtype: 'button',
                    text: '<span class="icon-search"> </span>',
                    handler: this._openSearchMenu,
                    scope: this
                }
            ]
        });
        
        filterTypeComboBox.on('change',this._changeSearchField, this);
    },
    
    _changeSearchField: function(field_combobox) {
        var field_name = field_combobox.getValue();
        
        var search_config = {
            itemId: 'searchTerms',
            emptyText: 'enter search terms',
            flex: 1
        };
                
        var field = this.models[this.artifactTypes[0]].getField(field_name)

        var editor_config = {
            xtype: 'textfield',
            enableKeyEvents: true,
            listeners: {
                keyup: function(textField, event) {
                    if (event.getKey() === Ext.EventObject.ENTER) {
                        this._search();
                    }
                },
                scope: this
            }
        };
        
        if ( field && field.editor && field.editor.field ) {
            editor_config = field.editor.field;
            
            // for timeboxes to load:
            delete editor_config.storeConfig; 
            editor_config.defaultToCurrentTimebox = true;
            editor_config.autoSelectCurrentItem = true;
            
            if ( editor_config.xtype == "rallytextfield" ) {
                editor_config.enableKeyEvents = true;
                editor_config.listeners = {
                    keyup: function(textField, event) {
                        if (event.getKey() === Ext.EventObject.ENTER) {
                            this._search();
                        }
                    },
                    scope: this
                };
            } else {
                editor_config.listeners = {
                    scope:  this,
                    change: this._search,
                    select: this._search
                };
            }
        }
        
        var config = Ext.Object.merge(search_config,editor_config);
        
        var index = this.down('#searchBar').items.length - 2;
        this.down('#searchTerms') && this.down('#searchTerms').destroy();
        this.down('#searchBar').insert(index,config);
    },
    
    /**
     * @private
     * @param {Object} models Object with {Rally.domain.WsapiModel} items
     *
     */
    _setupComboBox: function(models) {
        var searchBar = this.down('#searchBar');
        var combo = Ext.create('Ext.form.field.ComboBox', {
            xtype: 'combo',
            name: 'filterType',
            queryMode: 'local',
            store: Ext.create('Ext.data.Store', {
                fields: ['typeName', 'displayName', 'wsapiModel']
            }),
            displayField: 'displayName',
            valueField: 'typeName',
            editable: false
        });
        searchBar.insert(0, combo);

        Ext.Object.each(models, function(key, model) {
            combo.getStore().add({
                typeName: model.typePath,
                displayName: model.displayName,
                wsapiModel: model
            });
        }, this);

        combo.select(combo.getStore().getAt(0));

        combo.on('select', function(comboBox, options) {
            var option = options[0];
            this.grid.reconfigureWithModel(option.get('wsapiModel'));
        }, this);

    },

    /**
     * @private
     * @param {Rally.domain.WsapiModel}
     *
     */
    _buildGrid: function(model) {

        var mode = this.multiple ? 'MULTI' : 'SINGLE';
        this.selectionModel = Ext.create('Rally.ui.selection.CheckboxModel', {
            mode: mode,
            allowDeselect: true
        });

        var store_config = this.storeConfig;
        store_config.context = { project: Rally.getApp().getContext().getProjectRef()};
        
        var new_fetch = Ext.Array.merge(['ObjectID'],this.fetchFields);
        var current_fetch = store_config.fetch || [];
        
        store_config.fetch = Ext.Array.merge(new_fetch,current_fetch);
        
        var gridConfig = Ext.Object.merge({
            model: model,
            selModel: this.selectionModel,
            autoAddAllModelFieldsAsColumns: false,
            enableEditing: false,
            enableColumnHide: false,
            enableColumnMove: false,
            columnCfgs: this.columns,
            storeConfig: store_config,
            showRowActionsColumn: false,
            viewConfig: {
                emptyText: Rally.ui.EmptyTextFactory.get('defaultText')
            }
        }, this.config.gridConfig);

        this.grid = Ext.create('Rally.ui.grid.Grid', gridConfig);
        this.mon(this.grid, 'load', this._onGridLoad, this);
        this.down('#gridContainer').add(this.grid);
        this._onGridReady();
    },

    _onGridReady: function() {
        if (!this.grid.rendered) {
            this.mon(this.grid, 'afterrender', this._onGridReady, this, {single: true});
            return;
        }

        if (this.grid.getStore().isLoading()) {
            this.mon(this.grid, 'load', this._onGridReady, this, {single: true});
            return;
        }

        this._onGridLoad();
        this.center();

        if (Rally.BrowserTest) {
            Rally.BrowserTest.publishComponentReady(this);
        }
    },

    _onGridLoad: function() {
        if(this.getSelectedRef()){
            var recordIndex = this.grid.getStore().find('_ref', this.getSelectedRef());
            if(recordIndex !== -1){
                var record = this.grid.getStore().getAt(recordIndex);
                this.grid.getSelectionModel().select(record);
            }
        }
    },

    /**
     * @private
     * @return {Rally.data.Model}
     */
    _getSelectedRecords: function() {
        return this.selectionModel.getSelection();
    },

    /**
     * @private
     */
    _search: function() {        
        var terms = this.down('#searchTerms').getValue();
        var filterBy = this.down('#filterTypeComboBox').getValue();
        var filter;
        
        var store_config = this.grid.storeConfig;
        
        store_config.context = { project: Rally.getApp().getContext().getProjectRef() };
        
        if ( this.searchContext == "workspace" ) {
            store_config.context = { project: null };
        }
        
        var store = this.grid.getStore();        
        store.context = store_config.context;
        
        if (!Ext.isEmpty(terms)) {
            filter = Ext.create('Rally.data.wsapi.Filter', {
                property: filterBy,
                value: terms,
                operator: 'Contains'
            });
        }

        if ( Ext.isFunction( this.down('#searchTerms').getQueryFromSelected ) ){
            filter = this.down('#searchTerms').getQueryFromSelected();
        }
        
        this.grid.filter(filter, true);
    },

    _openSearchMenu: function(button) {
        var menu = Ext.widget({
            xtype: 'rallymenu',
            items: [
                { 
                    text: 'Search Selected Project',
                    handler: function() {
                        this.searchContext = 'project';
                        this._search();
                    },
                    scope: this
                },
                { 
                    text: 'Search Everywhere',
                    handler: function() {
                        this.searchContext = 'workspace';
                        this._search();
                    },
                    scope: this
                }
            ]
        });
        menu.showBy(button.getEl());
        if(button.toolTip) {
            button.toolTip.hide();
        }
    }
});

Ext.define('CA.technicalservices.ColumnPickerDialog',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tscolumnpickerdialog',

    width: 200,
    closable: true,

    config: {
        /**
         * @cfg {String}
         * Title to give to the dialog
         */
        title: 'Choose Columns',
        /**
         * @cfg {Boolean}
         * Allow multiple selection or not
         */
        multiple: true,
        /**
         *
         * @cfg [{Ext.Column.column}]  columns that
         * can be chosen.  hidden = false means chosen to
         * show.
         *
         */
        pickableColumns: [],

        selectionButtonText: 'Apply'

    },

    items: [{
        xtype: 'panel',
        border: false,
        items: [{
            xtype:'container',
            itemId:'grid_container',
            layout: 'fit',
            height: 325
        }]
    }],

    constructor: function(config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },

    initComponent: function() {
        this.callParent(arguments);
        this.addEvents(
            /**
             * @event columnschosen
             * Fires when user clicks done after choosing columns
             * @param {CA.technicalservices.ColumnPickerDialog} this dialog
             * @param [{Ext.column.Column}] columns with hidden marked true/false as appropriate
             */
            'columnschosen'
        );

        this._buildButtons();
        //this._buildSearchBar();
        this._buildGrid();
    },

    _buildButtons: function() {
        this.down('panel').addDocked({
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '0 0 10 0',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [
                {
                    xtype: 'rallybutton',
                    text: this.selectionButtonText,
                    cls: 'primary small',
                    scope: this,
                    userAction: 'clicked done in dialog',
                    handler: function() {
                        var selectedRecords = this.getRecordsWithSelection();
                        this.fireEvent('columnschosen', this, selectedRecords);
                        this.close();
                    }
                },
                {
                    xtype: 'rallybutton',
                    text: 'Cancel',
                    cls: 'secondary small',
                    handler: this.close,
                    scope: this,
                    ui: 'link'
                }
            ]
        });
    },

    _buildGrid: function() {
        var mode = this.multiple ? 'MULTI' : 'SINGLE';
        this.selectionModel = Ext.create('Rally.ui.selection.CheckboxModel', {
            mode: mode,
            allowDeselect: true
        });

        var pickableColumns = this.pickableColumns;

        console.log('pickable columns', pickableColumns);

        var store = Ext.create('Rally.data.custom.Store',{
            data: this.pickableColumns
        });


        this.grid = Ext.create('Rally.ui.grid.Grid', {
            selModel: this.selectionModel,
            enableColumnHide: false,
            enableColumnMove: false,
            columnCfgs: this._getGridColumns(),
            showPagingToolbar: false,
            showRowActionsColumn: false,
            store: store,
            listeners: {
                viewready: function(grid) {
                    var selectionModel = grid.getSelectionModel();

                    Ext.Array.each(pickableColumns, function(col, idx){
                        if ( !col.hidden ) {
                            selectionModel.select(grid.store.data.items[idx],true);
                        }
                    });
                }
            }
        });

        this.down('#grid_container').add(this.grid);
    },

    _getGridColumns: function() {
        return [
            { dataIndex: 'text', flex: 1 }
        ];
    },

    getRecordsWithSelection: function() {
        var selected_items = this.grid.getSelectionModel().getSelection();
        var selected_items_by_dataindex = {};
        Ext.Array.each(selected_items, function(selected_item){
            selected_items_by_dataindex[selected_item.get('text')] = selected_item.getData();
        });

        Ext.Array.each(this.pickableColumns, function(pickableColumn){
            pickableColumn.hidden = Ext.isEmpty(selected_items_by_dataindex[pickableColumn.text]);
        });

        return this.pickableColumns;
    }
});
Ext.define('CA.technicalservices.ColumnPickerButton',{
    extend: 'Rally.ui.Button',
    requires: [
        'CA.technicalservices.ColumnPickerDialog'
    ],
    
    alias: 'widget.tscolumnpickerbutton',
    
    config: {
        pickableColumns: [],
        text: '<span class="icon-add-column"> </span>',
        cls: 'secondary'

    },
    
    constructor:function (config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },
    
    initComponent: function() {
        this.callParent(arguments);
        this.addEvents(
            /**
             * @event columnschosen
             * Fires when user clicks done after choosing columns
             * @param {CA.technicalservices.ColumnPickerButton} this button
             * @param [{Ext.column.Column}] columns with hidden marked true/false as appropriate
             */
            'columnschosen'
        );
    },
    
    afterRender: function() {
        this.callParent(arguments);
        this.mon(this.el, this.clickEvent, this._showDialog, this);

    },
    
    _showDialog: function() {
        var me = this;
        Ext.create('CA.technicalservices.ColumnPickerDialog',{
            autoShow: true,
            pickableColumns: this.pickableColumns,
            listeners: {
                scope: this,
                columnschosen: function(dialog, columns) {
                    this.fireEvent('columnschosen', me, columns);
                }
            }
        });
    }
});
Ext.define('CA.technicalservices.TimeDetailsDialog', {
    extend: 'Rally.ui.dialog.Dialog',
    alias:'widget.tstimedetailsdialog',

    closable: true,

    layout: 'border',
    
    currentDay: null,
    
    timeBlocks: [],
    
    config: {
        /**
         * @cfg {String}
         * Title to give to the dialog
         */
        title: 'Time Details',
        
        row: null, // a time sheet row,
        
        autoShow: true,
        
        height: 400,
        width: 600

    },

    items: [{
        xtype: 'container',
        layout: 'hbox',
        items: [
            {
                xtype: 'container',
                itemId: 'daysContainer',
                layout: 'vbox',
                width: 150
            },
            {
                xtype: 'container',
                itemId: 'dayContainer',
//                border: 1,
//                style: {borderColor:'#f00', borderStyle:'solid', borderWidth:'1px'},
                width: 450
            }
        ]
    }],

    constructor: function(config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },

    initComponent: function() {
        this.callParent(arguments);
        
        this.currentDay = new Date().getDay();
        
        this._buildDays();
        
        this._buildForm();
    },
    
    _buildDays: function() {
        var me = this,
            days = CA.techservices.timesheet.TimeRowUtils.daysInOrder;
            
        var container = this.down('#daysContainer');
        this.day_boxes = {};
        
        Ext.Array.each(days, function(day){
            me.day_boxes[day] = container.add({
                item_id: 'day_box_' + day,
                xtype:'container',
                margin: 10,
                tpl: '<span class="day_name">{day}</span>: <span class="day_value">{value}</day>'
            });
            
            var value = me._getHoursForDay(day);
            me.day_boxes[day].update({day: day, value: value});
        });
    },
    
    _getHoursForDay: function(day_name) {
        var time_entry_value = this.row.getTimeEntryValue(day_name);
        var value = 0;
        
        if (! Ext.isEmpty(time_entry_value) ) {
            value = time_entry_value.get('Hours');
        }
        
        return value;
    },
    
    _buildForm: function() {
        var me = this,
            container = this.down('#dayContainer');
        
        this._buildNavigation(container);
        container.add({
            xtype:'container',
            itemId: 'detailsPanel',
            layout: 'vbox',
            width: '100%',
            height: 275,
            padding: 3
        });
        this._updateDetailsPanel();
        this._addAddButton(container);
        
    },
        
    _buildNavigation: function(container) {
        var me = this;
        
        var selector_box = container.add({
            xtype:'container',
            layout:'hbox'
        });
        
        selector_box.add({
            xtype:'rallybutton',
            text:'<span class="icon-left"> </span>', 
            cls: 'secondary small',
            listeners: {
                scope: this,
                click: this._moveLeft
            }
        });
        
        selector_box.add({ xtype:'container', flex: 1 });
        
        selector_box.add({
            xtype:'container', 
            tpl: '{day}',
            itemId: 'day_selector_display'
        }).update({ day: CA.techservices.timesheet.TimeRowUtils.daysInOrder[this.currentDay] });

        selector_box.add({ xtype:'container', flex: 1 });
        
        selector_box.add({
            xtype:'rallybutton',
            text:'<span class="icon-right"> </span>', 
            cls: 'secondary small',
            listeners: {
                scope: this,
                click: this._moveRight
            }
        });
        
    },
    
    _moveLeft: function() {
        this.currentDay = this.currentDay - 1;
        if ( this.currentDay < 0 ) {
            this.currentDay = 6;
        }
        this.down('#day_selector_display').update({ day: CA.techservices.timesheet.TimeRowUtils.daysInOrder[this.currentDay] });
        this._updateDetailsPanel();
    },
    
    _moveRight: function() {
        this.currentDay = this.currentDay + 1;
        if ( this.currentDay > 6 ) {
            this.currentDay = 0;
        }
        this.down('#day_selector_display').update({ day: CA.techservices.timesheet.TimeRowUtils.daysInOrder[this.currentDay] });
        this._updateDetailsPanel();
    },
    
    _updateDetailsPanel: function() {
        var me = this,
            container = this.down('#detailsPanel');
        container.removeAll();
        
        var today_details = this.row.getTimeBlocks(CA.techservices.timesheet.TimeRowUtils.daysInOrder[this.currentDay]);

        container.add({
            xtype:'container',
            itemId: 'time_block_container',
            flex: 1,
            layout: 'vbox'
        });
                
        this.timeBlocks = [];

        if ( !Ext.isEmpty(today_details)) {
            Ext.Array.each(today_details, function(detail){
                console.log('detail:', detail);
                this._addTimeBlock(detail);
            },this);
        }

        var current_total = this._getHoursForDay(CA.techservices.timesheet.TimeRowUtils.daysInOrder[this.currentDay]);
                
        var adjustment = current_total - this._getTotal();
        if ( adjustment < 0 ) {
            adjustment = 0;
        }
        
        this._addDailyAdjustmentBox(container, adjustment);
        this._enableDisableAddButton();
    },
    
    _addAddButton: function(container){
        var button_container = container.add({
            xtype: 'container',
            layout: 'hbox',
            width: '100%',
            padding: 10
        });
        
        button_container.add({xtype:'container',flex: 1});
        
        button_container.add({
            xtype:'rallybutton',
            itemId: 'add_block_button',
            cls: 'small secondary',
            text: '+',
            listeners: {
                scope: this,
                click: function(button) {
                    this._addTimeBlock();
                }
            }
        });
    },
    
    _addDailyAdjustmentBox: function(container, adjustment){
        var adjustment_container = container.add({
            xtype: 'container',
            layout: 'hbox',
            width: '100%',
            margin: 7
        });
        
        adjustment_container.add({xtype:'container',flex: 1});
        
        var field = adjustment_container.add({
            itemId: 'adjustment_box',
            xtype:'rallynumberfield',
            value: adjustment,
            labelWidth: 75,
            width: 130,
            fieldLabel: 'Adjustment:',
            maxValue: 24,
            minValue: 0
        });
        
        field.on('change',this._recalculateTotal, this);
        
    },
    
    _removeTimeBlock: function(block,fields) {
        console.log('remove', block);

        Ext.Array.each(fields.reverse(), function(field){
            field.setValue(0);
        });
        
        this.row.removeTimeBlock(CA.techservices.timesheet.TimeRowUtils.daysInOrder[this.currentDay], block.itemId);
        block.destroy();
        
        this._enableDisableAddButton();
    },
    
    _addTimeBlock: function(detail) {
        var container = this.down('#time_block_container');
        
        var item_id = new Date().getTime();
        if ( !Ext.isEmpty(detail) ) { item_id = detail.id; }
        
        var block = container.add({
            xtype: 'container',
            layout: 'hbox',
            itemId: item_id,
            defaults: { margin: 3 }
        });
        
        var hours = [
            {"display":"12A", "value":0},
            {"display":"1 A", "value":1},
            {"display":"2 A", "value":2},
            {"display":"3 A", "value":3},
            {"display":"4 A", "value":4},
            {"display":"5 A", "value":5},
            {"display":"6 A", "value":6},
            {"display":"7 A", "value":7},
            {"display":"8 A", "value":8},
            {"display":"9 A", "value":9},
            {"display":"10A", "value":10},
            {"display":"11A", "value":11},
            {"display":"12P", "value":12},
            {"display":"1 P", "value":13},
            {"display":"2 P", "value":14},
            {"display":"3 P", "value":15},
            {"display":"4 P", "value":16},
            {"display":"5 P", "value":17},
            {"display":"6 P", "value":18},
            {"display":"7 P", "value":19},
            {"display":"8 P", "value":20},
            {"display":"9 P", "value":21},
            {"display":"10P", "value":22},
            {"display":"11P", "value":23}
        ];
       
        var hour_store_start = Ext.create('Rally.data.custom.Store', {
            fields: ['display', 'value'],
            data : Ext.clone(hours)
        });
               
        var hour_store_end = Ext.create('Rally.data.custom.Store', {
            fields: ['display', 'value'],
            data : Ext.clone(hours)
        });
        
        var now = new Date();
        var hour_field_start = {
            xtype: 'rallycombobox',
            itemId: 'start_hour',
            fieldLabel: ' ',
            allowNoEntry: false,
            store: hour_store_start,
            queryMode: 'local',
            displayField: 'display',
            valueField: 'value',
            width: 95,
            labelWidth: 30,
            value: now.getHours()
        };
        
        var minute_field_start = {
            xtype:'rallynumberfield',
            itemId: 'start_minute',
            fieldLabel: '  ',
            maxValue: 59,
            minValue: 0,
//            spinDownEnabled: false,
//            spinUpEnabled: false,
            width: 55,
            labelWidth: 5,
            value: now.getMinutes()
        };
        
        var hour_field_end =  {
            xtype: 'rallycombobox',
            itemId: 'end_hour',
            allowNoEntry: true,
            noEntryText: ' ',
            noEntryValue: null,
            fieldLabel: 'to',
            store: hour_store_end,
            queryMode: 'local',
            displayField: 'display',
            valueField: 'value',
            width: 85,
            labelWidth: 20
        };
        
        var minute_field_end = {
            xtype:'rallynumberfield',
            itemId: 'end_minute',
            fieldLabel: '  ',
            maxValue: 59,
            minValue: 0,
//            spinDownEnabled: false,
//            spinUpEnabled: false,
            width: 55,
            labelWidth: 5
        };
        
        var total_field = {
            xtype:'rallynumberfield',
            itemId: 'block_total',
            fieldLabel: ' = ',
            labelSeparator: '',
            editable: false,
            maxValue: 24,
            minValue: 0,
            spinDownEnabled: false,
            spinUpEnabled: false,
            width: 65,
            labelWidth: 5
        };
        
        hour_field_start.value = new Date().getHours();
        minute_field_start.value = new Date().getMinutes();
        
        if ( !Ext.isEmpty(detail) ) { 
            hour_field_start.value = detail.start_hour;
            minute_field_start.value = detail.start_minute;
            hour_field_end.value = detail.end_hour;
            minute_field_end.value = detail.end_minute;
        }
        
        var fields = [
            block.add(hour_field_start),
            block.add(minute_field_start),
            block.add(hour_field_end),
            block.add(minute_field_end)
        ];
        
        block.add({xtype: 'container', flex: 1 });
        block.add(total_field);
        
        block.add({
            xtype:'rallybutton',
            itemId: 'remove_block_button',
            cls: 'no-border',
            text: '<span class="icon-cancel"> </span>',
            listeners: {
                scope: this,
                click: function(button) {
                    this._removeTimeBlock(block, fields);
                }
            }
        });
        
        Ext.Array.each(fields, function(field){
            field.on('change',function() { this._setValidBlockValues(block); }, this);
            field.on('change',function() { this._updateRow(block); }, this);
            field.on('change',function() { this._updateBlockTotal(block); }, this);
            // only update row total after block changes (not when first launched)
            field.on('change',this._recalculateTotal, this);
            
        },this);
        
        this.timeBlocks.push(block);
        
        this._setValidBlockValues(block);
        this._updateRow(block);
        this._updateBlockTotal(block);
        
    },
    
    _setValidBlockValues: function(block) {
        var start_hour = block.down('#start_hour').getValue();
        var start_minute = block.down('#start_minute').getValue();
        var end_hour = block.down('#end_hour').getValue();
        var end_minute = block.down('#end_minute').getValue();
        
        if ( Ext.isEmpty(start_hour) ) { return; }

        var end_store = block.down('#end_hour').getStore();
        end_store.clearFilter(true);
        end_store.addFilter({property:'value',operator:'>=',value:start_hour});
        
        if ( Ext.isEmpty(end_hour) ) { return; }
        
        if ( start_hour > end_hour ) {
            block.down('#end_hour').setValue('');
        }

    },
    
    _updateBlockTotal: function(block) {
        var start_hour = block.down('#start_hour').getValue();
        var start_minute = block.down('#start_minute').getValue();
        var end_hour = block.down('#end_hour').getValue();
        var end_minute = block.down('#end_minute').getValue();
        
        block.down('#block_total').setValue(0);
        
        var total = 0;
        
        if ( !Ext.isEmpty(start_hour) && !Ext.isEmpty(end_hour) ) { 
        
            var start = new Date(1999,1,1,start_hour,start_minute || 0);
            var end = new Date(1999,1,1,end_hour,end_minute || 0); 
            
            var total = Rally.util.DateTime.getDifference(end,start,'minute') / 60;
        }
        
        block.down('#block_total').setValue(total);
        this._enableDisableAddButton();
    },
    
    _updateRow: function(block) {
        console.log('_updateRow',block);
        this.row.addTimeBlock(CA.techservices.timesheet.TimeRowUtils.daysInOrder[this.currentDay],{
            id: block.getItemId(),
            start_hour: block.down('#start_hour').getValue(),
            start_minute: block.down('#start_minute').getValue(),
            end_hour: block.down('#end_hour').getValue(),
            end_minute: block.down('#end_minute').getValue()
        });
        
        this.row.save();
        
    },
    
    _enableDisableAddButton: function() {
        if ( !this.down('#add_block_button') ) {
            return;
        }
        
        var disabled = false;
        Ext.Array.each(this.timeBlocks, function(block){
            if ( ! block.down("#block_total") ) {
                return;
            }
            
            var total = block.down('#block_total').getValue() || 0;

            if ( total <= 0 ) {
                disabled = true;
            }
        });
        
        this.down('#add_block_button').setDisabled(disabled);
    },
    
    _getTotal: function() {
        var total = 0;
       
        Ext.Array.each(this.timeBlocks, function(block){
            if ( !Ext.isEmpty(block) ) {
                var value = ( block.down('#block_total') && block.down('#block_total').getValue()) || 0;
                total += value;
            }
        });
        
        var adjustment_box = this.down('#adjustment_box');
        if ( !Ext.isEmpty(adjustment_box) ) {
            var adjustment = adjustment_box.getValue() || 0;
            total = total + adjustment;
        }
        
        return total;
    },
    
    _recalculateTotal: function() {        
        var total = Ext.util.Format.number(this._getTotal(),'#.##');
        console.log('_recalculateTotal', CA.techservices.timesheet.TimeRowUtils.daysInOrder[this.currentDay], total);
        
        var day = CA.techservices.timesheet.TimeRowUtils.daysInOrder[this.currentDay];
        
        this.day_boxes[day].update({day: day, value: total});
        
        this.row.set(day, parseFloat(total,10));
        this.row.save();
    }
});
    
    

Ext.define('CA.techservices.timesheet.TimeRowUtils',{
    singleton: true,

    daysInOrder: ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],

    dayShortNames: {'Sunday':'Sun','Monday':'Mon','Tuesday':'Tues','Wednesday':'Wed','Thursday':'Thur','Friday':'Fri','Saturday':'Sat'},

    getDayOfWeekFromDate: function(jsdate) {
        if ( jsdate.getUTCHours() === 0 ) {
            return jsdate.getUTCDay();
        }
        return jsdate.getDay();
    },

    detailKeyPrefix: 'ca.technicalservices.timesheet.details',

    getDetailPrefix: function(start_date){
        if ( Ext.isDate(start_date) ) {
            start_date = Rally.util.DateTime.toIsoString(start_date).replace(/T.*$/,'');
        }
        return Ext.String.format("{0}.{1}",
            CA.techservices.timesheet.TimeRowUtils.detailKeyPrefix,
            start_date
        );
    },

    getDayOfWeek: function(value, record) {
        var week_start_date =  record.get('WeekStartDate');
        if ( Ext.isEmpty( week_start_date ) ) {
            return 0;
        }
        return CA.techservices.timesheet.TimeRowUtils.getDayOfWeekFromDate(week_start_date);
    },

    getFieldFromTimeEntryItems: function(value,record,field_name){
        if ( !Ext.isEmpty(value) ) { return value; }

        var teis = record.get('TimeEntryItemRecords');
        if ( Ext.isEmpty(teis) ) {
            return value;
        }

        if ( !Ext.isArray(teis) || teis.length === 0 ) {
            return value;
        }

        if (/\./.test(field_name)) {
            var field_array = field_name.split('.');
            var field = field_array.shift();
            if ( field_array.length == 1 ) {
                if ( Ext.isEmpty(teis[0].get(field)) ) {
                    return null;
                }
                return teis[0].get(field)[field_array[0]];
            }
            if ( field_array.length == 2 ) {
                if ( Ext.isEmpty(teis[0].get(field)) || Ext.isEmpty(teis[0].get(field)[field_array[0]]) ) {
                    return null;
                }
                return teis[0].get(field)[field_array[0]][field_array[1]];
            }

            console.log("Field Array Too Long", field_array);

        }
        return teis[0].get(field_name);
    },

    getDayValueFromTimeEntryValues: function(value, record, day_name) {
        // if we're modifying this directly, don't take it from the TimeEntryValueRecords
        if ( !Ext.isEmpty(value) ) { return value; }

        var index = Ext.Array.indexOf(CA.techservices.timesheet.TimeRowUtils.daysInOrder, day_name);
        var week_start_date =  record.get('WeekStartDate');

        if ( Ext.isEmpty(week_start_date) ) { return 0; }

        var week_end_date = Rally.util.DateTime.add(week_start_date, 'week', 1);

        var time_entry_values = record.get('TimeEntryValueRecords');

        var day_value = 0;
        Ext.Array.each(time_entry_values, function(time_entry_value){
            var tev_day = time_entry_value.get('DateVal').getUTCDay();
            var tev_date = time_entry_value.get('DateVal');

            if ( tev_day == index && tev_date >= week_start_date && tev_date < week_end_date ) {
                day_value = time_entry_value.get('Hours');
            }
        });

        return day_value || 0;
    },

    getTotalFromDayValues: function(value, record) {
        var total = 0;
        Ext.Array.each(CA.techservices.timesheet.TimeRowUtils.daysInOrder, function(day) {
            var hours = record.get(day) || 0;
            total = ( 100 * hours ) + total;
        });

        return Math.round( total ) / 100;
    },

    getOrderedDaysBasedOnWeekStart: function(week_start_day) {
        if ( week_start_day === 0 ) { return CA.techservices.timesheet.TimeRowUtils.daysInOrder; }

        var standard_days = CA.techservices.timesheet.TimeRowUtils.daysInOrder;

        var first_days = Ext.Array.slice(standard_days, week_start_day, 7);
        var second_days = Ext.Array.slice(standard_days, 0, week_start_day);

        return Ext.Array.push(first_days, second_days);
    },

    getValueFromDayOfWeek: function(week_start_date, week_start_day, day_name) {
        var days_in_order = CA.techservices.timesheet.TimeRowUtils.getOrderedDaysBasedOnWeekStart(week_start_day);

        var index = Ext.Array.indexOf(days_in_order, day_name);
        if ( moment(week_start_date).hours() === 0 ) {
            return moment(week_start_date).add(index,'days').toDate();
        }

        return moment(week_start_date).utc().add(index,'days').toDate();
    },

    getBlocksFromDetailPreference: function(value,record){
        if ( !Ext.isEmpty(value) ) { return value; }

        var pref = record.get('DetailPreference');
        if ( Ext.isEmpty(pref) ) { return {}; }

        var pref_value = pref.get('Value');

        if ( Ext.isEmpty(pref_value) ) { return {}; }
        if ( !/{/.test(pref_value) ) { return {}; }

        return Ext.JSON.decode(pref_value);
    },

    getItemOIDFromTimeEntryItem: function(record) {
        var item_oid = -1;
        var workproduct = record.get('WorkProduct');
        var task = record.get('Task');

        if ( !Ext.isEmpty(workproduct) ) {
            item_oid = workproduct.ObjectID;
        }

        if ( !Ext.isEmpty(task) ) {
            item_oid = task.ObjectID;
        }


        return item_oid;
    },

    getDetailPreference: function(record) {

        return Deft.Chain.sequence([
            function() {
                var deferred = Ext.create('Deft.Deferred');
                if ( !Ext.isEmpty(record.get('DetailPreference')) ) {
                    return [ record.get('DetailPreference') ];
                }


                var oid = record.get('TaskOID');
                if ( oid < 0 ) {
                    oid = record.get('WorkProductOID');
                }
                var key_start = CA.techservices.timesheet.TimeRowUtils.getDetailPrefix(record.get('WeekStartDate'));

                var key = Ext.String.format("{0}.{1}",
                    key_start,
                    oid
                );

                Rally.data.ModelFactory.getModel({
                    type: 'Preference',
                    success: function(model) {
                        var pref = Ext.create(model, {
                            Name: key,
                            Value: "{}",
                            User: Rally.getApp().getContext().getUser()._ref,
                            Project: null
                        });

                        pref.save({
                            callback: function(preference, operation) {
                                if(operation.wasSuccessful()) {
                                    record.set('DetailPreference', preference);
                                    deferred.resolve(preference);
                                }
                            }
                        });
                    }
                });

                return deferred.promise;
            }
        ]);
    },

    loadWsapiRecords: function(config,returnOperation){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;

        var default_config = {
            model: 'Preference',
            fetch: ['ObjectID']
        };
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    if ( returnOperation ) {
                        deferred.resolve(operation);
                    } else {
                        deferred.resolve(records);
                    }
                } else {
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    }

});

Ext.define('CA.techservices.timesheet.TimeRow',{
    extend: 'Ext.data.Model',

    createTEVProcess: {},

    fields: [
        { name: '__SecretKey', type:'string' },
        { name: 'Pinned', type: 'boolean', defaultValue: false },

        { name: 'DragAndDropRank',type: 'object', defaultValue: null, convert:
            function(value,record) {
                var item = CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'WorkProduct');
                if ( Ext.isEmpty(item) ) { return ''; }
                return item.DragAndDropRank || '';
            }
        },

        { name: 'Project',type: 'object', defaultValue: null, convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'Project');
            }
        },

        { name: 'Task', type:'object', defaultValue: null, convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'Task')
                    || "";
            }
        },
        { name: 'TaskOID', type: 'number', defaultValue: null, convert:
            function(value,record) {
                var item = CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'Task');

                if ( Ext.isEmpty(item) ) { return -1; }
                return item.ObjectID || -1;
            }
        },
        { name: 'TaskFID', type: 'string', defaultValue: null, convert:
            function(value,record) {
                var item = CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'Task');

                if ( Ext.isEmpty(item) ) { return -1; }
                return item.FormattedID || -1;
            }
        },
        { name: 'TaskName', type: 'string', defaultValue: null, convert:
            function(value,record) {
                var item = CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'Task');

                if ( Ext.isEmpty(item) ) { return ''; }
                return item.Name || '';
            }
        },
        { name: 'User', type:'object', defaultValue: null, convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'User');
            }
        },
        { name: 'WeekStartDate', type:'date' },
        { name: 'WorkProduct', type: 'object', defaultValue: null, convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'WorkProduct')
                    || "";
            }
        },
        { name: 'WorkProductOID', type: 'number', defaultValue: null, convert:
            function(value,record) {
                var item = CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'WorkProduct');

                if ( Ext.isEmpty(item) ) { return -1; }
                return item.ObjectID || -1;
            }
        },
        { name: 'WorkProductFID', type: 'string', defaultValue: null, convert:
            function(value,record) {
                var item = CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'WorkProduct');

                if ( Ext.isEmpty(item) ) { return '' }
                return item.FormattedID || '';
            }
        },
        { name: 'WorkProductName', type: 'string', defaultValue: null, convert:
            function(value,record) {
                var item = CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'WorkProduct');

                if ( Ext.isEmpty(item) ) { return ''; }
                return item.Name || '';
            }
        },
        { name: 'WorkProductState', type: 'string', defaultValue: null, convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'WorkProduct.State')
                    || "--";

//                if ( Ext.isEmpty(item) ) { return ''; }
//                return item.State || '';
            }
        },
        { name: 'WorkProductPriority', type: 'string', defaultValue: null, convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'WorkProduct.Priority')
                    || CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'WorkProduct.c_Priority');

//                if ( Ext.isEmpty(item) ) { return ''; }
//                return item.Priority || '';
            }
        },
        { name: 'PortfolioItem', type: 'object', defaultValue: null, convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'WorkProduct.PortfolioItem')
                    || "";
            }
        },
        { name: 'PortfolioItemOID', type: 'number', defaultValue: null, convert:
            function(value,record) {
                var item = CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'WorkProduct.PortfolioItem');

                if ( Ext.isEmpty(item) ) { return -1; }
                return item.ObjectID || -1;
            }
        },
        { name: 'PortfolioItemFID', type: 'string', defaultValue: null, convert:
            function(value,record) {
                var item = CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'WorkProduct.PortfolioItem');

                if ( Ext.isEmpty(item) ) { return '' }
                return item.FormattedID || '';
            }
        },
        { name: 'PortfolioItemName', type: 'string', defaultValue: null, convert:
            function(value,record) {
                var item = CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'WorkProduct.PortfolioItem');

                if ( Ext.isEmpty(item) ) { return ''; }
                return item.Name || '';
            }
        },

        { name: 'Iteration', type: 'object', defaultValue: null, convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'WorkProduct.Iteration')
                    || CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'Task.Iteration')
                    || "";
            }
        },

        { name: 'ToDo', type: 'number', defaultValue: null, convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'Task.ToDo');
            }
        },

        { name: 'Est', type: 'number', defaultValue: null, convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'Task.Estimate');
            }
        },

        { name: 'State', type: 'object', defaultValue: null, convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getFieldFromTimeEntryItems(value, record, 'Task.State') || "";
            },
            sortType : function (value) {
                var allowed_order = ['Defined','In-Progress','Completed'];
                return Ext.Array.indexOf(allowed_order,value);
            }
        },
        // WeekStart: Day of Week (0=Sunday, 6=Saturday)
        { name: 'WeekStart', type: 'int', convert:  CA.techservices.timesheet.TimeRowUtils.getDayOfWeek },

        // store the AC records for saving/updating
        { name: 'TimeEntryItemRecords', type:'object', defaultValue: []},
        { name: 'TimeEntryValueRecords', type:'object', defaultValue: []},

        //
        { name: 'Sunday', type:'number', persist: true,
            convert: function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getDayValueFromTimeEntryValues(value, record, 'Sunday');
            }
        },
        { name: 'Monday', type:'number', convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getDayValueFromTimeEntryValues(value, record, 'Monday');
            }
        },
        { name: 'Tuesday', type:'number', convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getDayValueFromTimeEntryValues(value, record, 'Tuesday');
            }
        },
        { name: 'Wednesday', type:'number', convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getDayValueFromTimeEntryValues(value, record, 'Wednesday');
            }
        },
        { name: 'Thursday', type:'number', convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getDayValueFromTimeEntryValues(value, record, 'Thursday');
            }
        },
        { name: 'Friday', type:'number', convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getDayValueFromTimeEntryValues(value, record, 'Friday');
            }
        },
        { name: 'Saturday', type:'number', convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getDayValueFromTimeEntryValues(value, record, 'Saturday');
            }
        },
        { name: 'Total', type: 'number', defaultValue: 0, convert:
            function(value,record) {
                return CA.techservices.timesheet.TimeRowUtils.getTotalFromDayValues(value, record);
            }
        },
        {
            name: 'DetailPreference', type:'object', defaultValue: null
        },
        {
            name: '_DetailBlocks', type:'object',
            convert:  function(value,record){
                return CA.techservices.timesheet.TimeRowUtils.getBlocksFromDetailPreference(value, record);
            }
        }
    ],

    getWeekStartDates: function() {
        var day_of_week = this.get('WeekStart');
        var date_of_week = this.get('WeekStartDate');


        if (day_of_week === 0 ) {
            return [date_of_week];
        }

        var date1 = Rally.util.DateTime.add(date_of_week, 'day', -1 * day_of_week);
        var date2 = Rally.util.DateTime.add(date1, 'day', 7);

        return [date1, date2];
    },

    save: function(v) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this,
            changes = this.getChanges();

        var promises = [];
        var week_start_date =  this.get('WeekStartDate');

        Ext.Object.each(changes, function(field, value) {
            console.log('Change:',field,value);
            var value_date = CA.techservices.timesheet.TimeRowUtils.getValueFromDayOfWeek(me.get('WeekStartDate'), me.get('WeekStart'), field);
            //if ( value_date > new Date() ) { Rally.ui.notify.Notifier.showWarning({message: 'Warning: Creating Time in Future', timeout: 1000});  }

            if ( Ext.Array.contains(CA.techservices.timesheet.TimeRowUtils.daysInOrder, field) ) {
                if ( me._dateIsPrecedingMonth(value_date) || me._dateIsPrecedingWeek(value_date)) { me._showClosedNotification(); }                
                promises.push( function() { return me._changeDayValue(field,value); });
            }

            if ( field == "ToDo" ) {
                promises.push(function() { return me._changeToDoValue(value); });
            }

            if ( field == "State" ) {
                promises.push(function() { return me._changeStateValue(value); });
            }

            if ( field == "_DetailBlocks" ) {
                promises.push(function() { return me._changeDetailPreference(value); });
            }

            if ( field == "WorkProductState" ) {
                promises.push(function() { return me._changeDefectStateValue(value); });
            }            
        });

        return Deft.Chain.sequence(promises,this);
    },

    _showClosedNotification: function(){
        Rally.ui.notify.Notifier.showWarning({message: 'Warning: Creating time entry in a closed period – registrations will not be transferred to SAP'});
        setTimeout(function() { 
            Rally.ui.notify.Notifier.hide();
        }, 6000);
    },

    _changeToDoValue: function(value) {
        return this._changeTaskFieldValue('ToDo',value);
    },

    _changeStateValue: function(value) {
        if ( value == "Completed" ) { this.set('ToDo', 0); }

        return this._changeTaskFieldValue('State',value);
    },

    _changeTaskFieldValue: function(field, value) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        var task = this.get("Task");

        if ( Ext.isEmpty(task) ) {
            return;
        }

        Rally.data.ModelFactory.getModel({
            type: 'Task',
            scope: this,
            success: function(model) {
                model.load(task.ObjectID,{
                    fetch: ['Name', 'State', 'Iteration','ToDo','WorkProduct'],
                    callback: function(result, operation) {
                        if(operation.wasSuccessful()) {
                            result.set(field,value);
                            result.save({
                                callback: function(new_task, operation) {
                                    me.set('Task', new_task.getData());
                                    deferred.resolve(new_task);
                                }
                            });

                        } else {
                            deferred.reject('Problem saving Task');
                        }
                    }
                });
            }
        });
        return deferred;
    },

    _changeDefectStateValue: function(value) {
        return this._changeDefectFieldValue('State',value);
    },
 
    _changeDefectFieldValue: function(field, value) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        var defect = this.get("WorkProduct");
 
        if ( Ext.isEmpty(defect) ) {
            return;
        }
 
        Rally.data.ModelFactory.getModel({
            type: 'Defect',
            scope: this,
            success: function(model) {
                model.load(defect.ObjectID,{
                    fetch: ['Name', 'State'],
                    callback: function(result, operation) {
                        if(operation.wasSuccessful()) {
                            result.set(field,value);
                            result.save({
                                callback: function(new_defect, operation) {
                                    me.set('Defect', new_defect.getData());
                                    deferred.resolve(new_defect);
                                }
                            });
 
                        } else {
                            deferred.reject('Problem saving Defect');
                        }
                    }
                });
            }
        });
        return deferred;
    },

    _changeDayValue: function(day, value) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;

        console.log('_changeDayValue:', day, value);

        var time_entry_value = this.getTimeEntryValue(day);

        // remove from cache of fields that have changed (assumes save is fine)
        delete this.modified[day];

        if ( Ext.isEmpty(time_entry_value) ) {
            return this._createTimeEntryValue(day,value);
        }

        time_entry_value.set('Hours',value);
        // recalculate total
        this.set('Total', 0);

        time_entry_value.save({
            callback: function(result) {
                deferred.resolve(result);
            }
        });

        return deferred.promise;
    },

    clearAndRemove: function() {
        var me = this,
            promises = [];

        Rally.getApp().setLoading("Clearing...");

        Ext.Array.each(CA.techservices.timesheet.TimeRowUtils.daysInOrder, function(day_name) {
            var time_entry_value = me.getTimeEntryValue(day_name);

            if (!Ext.isEmpty(time_entry_value)){
                promises.push(function(){
                    var deferred = Ext.create('Deft.Deferred');
                    me.set(day_name, 0);
                    time_entry_value.destroy({
                        callback: function(result, operation) {
                            deferred.resolve();
                        }
                    });
                    return deferred.promise;
                });
            }
        });

        Deft.Chain.sequence(promises).then({
            scope: this,
            success: function(results) {
                this.set('TimeEntryValueRecords',[]);
                this.set('Total', 0);

                var time_entry_items = this.get('TimeEntryItemRecords');
                var promises = Ext.Array.map(time_entry_items, function(time_entry_item){
                    return function() { return me._removeTimeEntryItem(time_entry_item); }
                });

                Deft.Chain.sequence(promises).then({
                    scope: this,
                    success: function() {
                        Rally.getApp().setLoading(false);
                        me.destroy();
                    },
                    failure: function(msg) {
                        console.log("cannot remove all the time entry items because they're used elsewhere",msg);
                    }
                }).always(function() { Rally.getApp().setLoading(false); });
            }
        });

    },

    _removeTimeEntryItem: function(time_entry_value){
        var deferred = Ext.create('Deft.Deferred');
        time_entry_value.destroy({
            callback: function(result, operation) {
                if ( operation.wasSuccessful() ) {
                    deferred.resolve();
                } else {
                    deferred.reject(operation.error.errors[0]);
                }
            }
        });
        return deferred.promise;
    },

    getTimeEntryValue: function(day_name) {
        var index = Ext.Array.indexOf(CA.techservices.timesheet.TimeRowUtils.daysInOrder, day_name);
        var week_start_date =  this.get('WeekStartDate');
        var time_entry_values = this.get('TimeEntryValueRecords');

        console.log('getTimeEntryValue', day_name, index, week_start_date, time_entry_values);

        var day_value = null;
        var value_date = CA.techservices.timesheet.TimeRowUtils.getValueFromDayOfWeek(this.get('WeekStartDate'), this.get('WeekStart'), day_name);
        console.log('   ', value_date);

        Ext.Array.each(time_entry_values, function(time_entry_value){
            console.log("comparing", Ext.Date.format(value_date,'y-m-d'), Ext.Date.format(time_entry_value.get('DateVal'),'y-m-d'));
            if ( Ext.Date.format(value_date,'y-m-d') == Ext.Date.format(time_entry_value.get('DateVal'),'y-m-d')) {
                day_value = time_entry_value;
            }
        });

        return day_value;
    },

    _createTimeEntryValue: function(day_name, value) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;

        console.log('_createTimeEntryValue', day_name, value);

        var value_date = CA.techservices.timesheet.TimeRowUtils.getValueFromDayOfWeek(this.get('WeekStartDate'), this.get('WeekStart'), day_name);

        console.log('    ', value_date);

        var time_entry_item = null;
        Ext.Array.each(this.get('TimeEntryItemRecords'), function(item){
            var delta = Rally.util.DateTime.getDifference(value_date, item.get('WeekStartDate'), 'day');
            if ( value_date >= item.get('WeekStartDate') && delta < 7 ) {
                time_entry_item = item;
            }
        });

        if ( Ext.isEmpty(time_entry_item) ) {
            console.log('No Time Entry Item');

            this._createTimeEntryItem(value_date, this.get('Project'), this.get('WorkProduct'), this.get('Task') ).then({
                scope: this,
                success: function(result) {
                    console.log('Created Time Entry Item');
                    if ( this.createTEVProcess[day_name] && this.createTEVProcess[day_name].getState() === 'pending' ) {
                        console.log('..Save is already in process');
                        deferred.resolve();
                    } else {
                        this.createTEVProcess[day_name] = this._createTimeEntryValueWithModel(day_name, value, value_date, result);
                        return this.createTEVProcess[day_name];
                    }
                },
                failure: function(msg) {
                    console.log("Problem creating new TEI", msg);
                    deferred.reject(msg);
                }
            });
            return deferred.promise;
        }

        if ( this.createTEVProcess[day_name] && this.createTEVProcess[day_name].getState() === 'pending' ) {
            console.log('...Save is already in process', day_name);
            return;
        } else {
            console.log('...Create new entry value', day_name);

            this.createTEVProcess[day_name] = this._createTimeEntryValueWithModel(day_name, value, value_date, time_entry_item);
            return this.createTEVProcess[day_name];
        }
    },

    _createTimeEntryItem: function(value_date, project, workproduct, task) {
        Rally.getApp().setLoading('Creating Time Entry Item...');

        var deferred = Ext.create('Deft.Deferred'),
            me = this;

        var sunday_start = TSDateUtils.getBeginningOfWeekISOForLocalDate(value_date);
        console.log("Creating TEI for week starting:", sunday_start, " (", value_date, ")");

        var config = {
            WeekStartDate: sunday_start,
            Project: { _ref: project._ref }
        };

        if ( !Ext.isEmpty(task) ) {
            config.Task = { _ref: task._ref };
        }

        if ( !Ext.isEmpty(workproduct) ) {
            config.WorkProduct = { _ref: workproduct._ref };
        }

        Rally.data.ModelFactory.getModel({
            type: 'TimeEntryItem',
            scope: this,
            success: function(model) {
                var tei = Ext.create(model,config);
                tei.save({
                    callback: function(result, operation) {
                        var records = me.get('TimeEntryItemRecords') || [];
                        records.push(result);
                        me.set('TimeEntryItemRecords', records);
                        Rally.getApp().setLoading(false);
                        deferred.resolve(result);
                    }
                });
            }
        });
        return deferred.promise;
    },

    _createTimeEntryValueWithModel: function(day_name, value, value_date, time_entry_item) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;

        var date_val = TSDateUtils.formatShiftedDate(value_date,'Y-m-d') + 'T00:00:00.000Z';

        console.log("Creating Time Entry Value", day_name, value, value_date, date_val, time_entry_item);

        Rally.data.ModelFactory.getModel({
            type: 'TimeEntryValue',
            scope: this,
            success: function(model) {
                this._changeFieldRights(model);

                var tev = Ext.create(model,{
                    Hours: value,
                    TimeEntryItem: { _ref: time_entry_item.get('_ref') },
                    DateVal: date_val
                });

                tev.save({
                    callback: function(result, operation) {
                        if(operation.wasSuccessful()) {
                            this.set(day_name, value);

                            var records = me.get('TimeEntryValueRecords') || [];
                            records.push(result);
                            me.set('TimeEntryValueRecords', records);

                            me.set('Total', 0); // updates the total automatically
                            deferred.resolve(result);
                        } else {
                            me.set(day_name, 0);
                            console.log('Problem saving Time Entry Value:',day_name, operation);
                            //throw 'Problem saving time entry value';
                            deferred.reject(operation.error && operation.error.errors.join('.'));
                        }
                    }
                });

            }
        });
        return deferred.promise;
    },

    _changeFieldRights: function(model) {
        var fields = model.getFields();
        Ext.Array.each(fields, function(field,idx) {
            if ( field.name == "TimeEntryItem" ) {
                field.readOnly = false;
                field.persist = true;
                field.type = 'string';
            }
            if ( field.name == "DateVal" ) {
                // override field definition so that we can write to the
                // field AND pass it a string for midnight at Z instead of
                // the local timestamp
                fields[idx] = Ext.create('Rally.data.wsapi.Field',{
                    type:'string',
                    readOnly: false,
                    persist: true,
                    name: 'DateVal',
                    custom: false,
                    hidden: false,
                    useNull: false
                });
            }
        });

        return model;
    },

    _changeDetailPreference: function(value) {
        var me = this;
        var json_value = Ext.JSON.encode(value);

        if ( this.process && this.process.getState() === 'pending') {
            return;
        }

        this.process = Deft.Chain.sequence([
            function() {
                return CA.techservices.timesheet.TimeRowUtils.getDetailPreference(me);
            }
        ],this).then({
            success: function(preferences){
                preferences = Ext.Array.flatten(preferences);
                if ( preferences.length === 0 ) {
                   return;
                }
                var preference = preferences[0];

                preference.set('Value', json_value);
                preference.save();
            },
            failure: function(msg){
                Ext.Msg.alert("Problem saving detail", msg);
            }
        });
    },

    addTimeBlock: function(day, time_object){
        var block_set = this.get('_DetailBlocks');
        if ( Ext.isEmpty(block_set) && ! Ext.isEmpty(this.get('DetailPreference')) ){
            console.log('there is a detail pref', this.get('DetailPreference'));
            block_set = Ext.JSON.decode(this.get('DetailPreference').get('Value'));
            this.set('_DetailBlocks', block_set);
        }

        var blocks = this.getTimeBlocks(day);

        var block = this.getTimeBlock(day,time_object.id);
        if ( Ext.isEmpty(block) ) {
            blocks.push(time_object);
            //block_set[day] = blocks;
        } else {
            Ext.Object.merge(block, time_object);
        }

        block_set[day] = blocks;

        this.set('_DetailBlocks', block_set);
        this.set('_SecretKey',new Date());
        this.setDirty();// TODO: why is set() not setting the record as dirty and the field as changed?
    },

    removeTimeBlock: function(day, block_id){
        var block_set = this.get('_DetailBlocks');
        if ( Ext.isEmpty(block_set) && ! Ext.isEmpty(this.get('DetailPreference')) ){
            block_set = Ext.JSON.decode(this.get('DetailPreference').get('Value'));
            this.set('_DetailBlocks', block_set);
        }

        var blocks = this.getTimeBlocks(day);

        var new_blocks = Ext.Array.filter(blocks, function(block){
            return ( block_id != block.id );
        });

        block_set[day] = new_blocks;

        this.set('_DetailBlocks', block_set);
        this.set('_SecretKey',new Date());
        this.setDirty();// TODO: why is set() not setting the record as dirty and the field as changed?
    },

    getTimeBlock: function(day, id) {
        var blocks = this.getTimeBlocks(day);
        var block = null;
        Ext.Array.each(blocks, function(b){
            if ( b.id == id ) {
                block = b;
            }
        });

        return block;
    },

    getTimeBlocks: function(day) {
        var blocks = this.get('_DetailBlocks');

        if ( blocks && blocks[day] ) {
            return blocks[day];
        }
        return [];
    },

    isPinned: function() {
        return this.get('Pinned') || false;
    },

    _dateIsPrecedingWeek: function(value_date){
        var today = new Date();
        var week_start_date =  this.get('WeekStartDate');
        if ( today < week_start_date ) {
            return false;
        }

        if ( today > Rally.util.DateTime.add(week_start_date,"day",8)) {
            return true;
        }
        // if this is the first day of the following week, ok if it's before 12:05
        if (( today > Rally.util.DateTime.add(week_start_date,"day",7) ) && (today < Rally.util.DateTime.add(week_start_date,"day",8) ) ) {
            if ( today.getHours() > 12 ) {
                return true;
            }

            if ( today.getHours() == 12 && today.getMinutes() > 4 ) {
                return true;
            }
        }

        return false;
    },

    _dateIsPrecedingMonth: function(value_date) {
        var today = new Date();
        // if we're in next year or next month, it's not preceding month
        if ( value_date.getYear() > today.getYear() || value_date.getMonth() > today.getMonth() ) {
            return false;
        }
        
        // if we're the same month, it's not the preceding month
        if ( value_date.getMonth() == today.getMonth() ) {
            return false;
        }
        // if we're putting in data for the month before last, it's definitely
        // old
        if ( value_date.getMonth() < today.getMonth() - 1 ) {
            return true;
        }
        // if we're putting in data and today is the first, it might be ok for last month
        if ( today.getDate() > 1 ) {
            return true;
        }
        // if it's the first of the month, we have until 12:05pm
        if ( today.getHours() > 12 ) {
            return true;
        }

        if ( today.getHours() == 12 && today.getMinutes() > 5 ) {
            return true;
        }
        return false;
    },

    hasOpenDetails: function() {
        var has_open = false;
        var blocks = this.get('_DetailBlocks');

        Ext.Object.each(blocks, function(day,day_blocks){
            Ext.Array.each(day_blocks, function(block){
                if ( Ext.isEmpty(block.end_hour) ) {
                    has_open = true;
                }
            });
        });

        return has_open;
    }
});

Ext.override(Rally.ui.grid.plugin.Validation,{
    _onBeforeEdit: function(editor, object, eOpts) {
        // clear this because it won't let us do the getEditor on cells
    }
});

Ext.define('CA.techservices.TimeTable', {
    extend: 'Ext.Container',
    alias:  'widget.tstimetable',

    logger: new Rally.technicalservices.Logger(),

    rows: [],
    cls: 'tstimetable',

    time_entry_item_fetch: ['WeekStartDate','WorkProductDisplayString','WorkProduct','Task',
        'TaskDisplayString','PortfolioItem','Project', 'ObjectID', 'Name', 'Release', 'FormattedID',
        'Iteration','ToDo','State','Rank','Defect','Estimate','Priority','c_Priority'],

    config: {
        startDate: null,
        editable: true,
        timesheetUser: null,
        pinKey: 'CA.techservices.timesheet.pin',
        showEditTimeDetailsMenuItem: false,
        pickableColumns: null,
        maxRows: null,
        /* String -- put in the lowest level PI Name (field name on a story) so we can trace up to a PI */
        lowestLevelPIName: null
    },

    constructor: function (config) {
        this.mergeConfig(config);

        if (Ext.isEmpty(config.startDate) || !Ext.isDate(config.startDate)) {
            throw "CA.techservices.TimeTable requires startDate parameter (JavaScript Date)";
        }

        this.weekStart = CA.techservices.timesheet.TimeRowUtils.getDayOfWeekFromDate(this.startDate) || 0;

        console.log('start date/day', this.startDate, this.weekStart);

        this.callParent([this.config]);
    },

    initComponent: function() {
        var me = this;
        this.callParent(arguments);

        this.addEvents(
            /**
             * @event
             * Fires when the grid has been rendered
             * @param {CA.techservices.TimeTable } this
             * @param {Rally.ui.grid.Grid} grid
             */
            'gridReady'
        );


        if ( Ext.isEmpty(this.timesheetUser) ) {
            this.timesheetUser = Rally.getApp().getContext().getUser();
        }
        // shift start date
        this.startDate = TSDateUtils.pretendIMeantUTC(this.startDate);

        if ( !Ext.isEmpty(this.lowestLevelPIName) ) {
            this.time_entry_item_fetch.push(this.lowestLevelPIName);
        }

        TSUtilities.fetchField('Task','State').then({
            success:function(field){
                this.taskState = field;
                this._updateData();
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem Initiating TimeSheet App', msg);
            },
            scope: this
        });


    },

    _updateData: function() {
        this.setLoading('Loading time...');
        var me = this;


        Deft.Chain.sequence([
            this._loadTimeEntryItems,
            this._loadTimeEntryValues,
            this._loadTimeDetailPreferences,
            this._loadDefaultSettings
        ],this).then({
            scope: this,
            success: function(results) {
                var time_entry_items  = results[0];
                var time_entry_values = results[1];
                var time_detail_prefs = results[2];
                this.time_entry_defaults = results[3];

                this.rows = this._createRows(time_entry_items, time_entry_values,time_detail_prefs);
                this._makeGrid(this.rows);
                this.setLoading(false);
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem Loading', msg);
            }
        });
    },

    _loadDefaultSettings: function() {
        var deferred = Ext.create('Deft.Deferred');

        Rally.data.PreferenceManager.load({
            filterByUser: true,
            additionalFilters: [{property:'Name', operator:'contains', value: this.pinKey}],

            success: function(prefs) {
                //process prefs
                //console.log('prefs', prefs);
                var defaults = {};
                Ext.Object.each(prefs, function(key,pref){
                    var value = Ext.JSON.decode(pref);
                    Ext.apply(defaults, value);
                });

                deferred.resolve(defaults);
            }
        });
        return deferred.promise;
    },

    _makeGrid: function(rows) {
        this.removeAll();
        var me = this,
            table_store = Ext.create('Rally.data.custom.Store',{
                groupField: '__SecretKey',
                model: 'CA.techservices.timesheet.TimeRow',
                data: rows,
                pageSize: me.maxRows,
                remoteSort: false,
                sortOnFither: true,
                sortOnLoad: true,
                sorters: [{property: this.sortedColumn , direction: this.sortDirection}]                
            });
//me.logger.log('WO Types:', rows)

        this.grid = this.add({
            xtype:'rallygrid',
            store: table_store,
            columnCfgs: this._getColumns(),
            showPagingToolbar : false,
            showRowActionsColumn : false,
            disableSelection: true,
            enableColumnMove: false,
            enableColumnResize : false,
            defaultSortToRank:true,
//            stateful: true,
//    stateEvents: ['columnschosen','columnmoved','columnresize'],
//            stateId: 'CA.technicalservices.timesheet.Settings.2',
            features: [{
                ftype: 'summary',
                dock: 'top'
            }],
            listeners: {
                sortchange: function(ct, column, direction, eOpts) {
                    this.sortedColumn = column.dataIndex;
                    this.sortDirection = direction;
                    me.fireEvent('sortchange', this, column.dataIndex, direction);
                }
            },            
            viewConfig: {
                listeners: {
                    itemupdate: function(row, row_index) {
                        //me.logger.log('itemupdate', row);
                    }
                }
            }
        });

        this.fireEvent('gridReady', this, this.grid);
    },

    _getRowActions: function(record) {
        //
        var me = this;

        var actions = [
            {
                xtype: 'rallyrecordmenuitem',
                text: 'Set as Default',
                predicate: function() {
                    return !this.record.isPinned();
                },
                handler: function(menu,evt) {
                    me._pinRecord(menu.record);
                },
                record: record
            },
            {
                xtype: 'rallyrecordmenuitem',
                text: 'Unset Default',
                predicate: function() {
                    return this.record.isPinned();
                },
                handler: function(menu,evt) {
                    me._unpinRecord(menu.record);
                },
                record: record
            },
            {
                xtype: 'rallyrecordmenuitem',
                text: 'Clear',
                record: record,
                handler: function(menu,evt) {
                    var row = menu.record;
                    if(0 < row.get('Total')){
                        Ext.MessageBox.confirm('Clear Row', 'You have hours entered for this row. Are you sure?',function(res){
                            if('yes'===res){
                                Ext.Array.remove(me.rows, row);
                                row.clearAndRemove();
                            }
                        });
                    }else{
                            Ext.Array.remove(me.rows, row);
                            row.clearAndRemove();
                    }
                }
            }
        ];

        if ( me.showEditTimeDetailsMenuItem ) {
            actions.push({
                xtype: 'rallyrecordmenuitem',
                text: 'Edit Time',
                record: record,
                handler: function(menu,evt) {
                    var row = menu.record;
                    me._launchTimeDetailsDialog(row);
                }
            });
        }
        return actions;

    },

    setPickableColumns: function(pickable_columns) {
        this.logger.log('setPickableColumns', pickable_columns);

        var columns = Ext.Array.merge([], this._getBaseLeftColumns());
        columns = Ext.Array.merge(columns, pickable_columns);
        columns = Ext.Array.merge(columns, this._getBaseRightColumns());

        var store = this.getGrid().getStore();
        this.getGrid().reconfigure(store, columns);
    },

    _getColumns: function() {
        var columns = Ext.Array.merge([], this._getBaseLeftColumns());

        columns = Ext.Array.merge(columns, this.getPickableColumns());

        columns = Ext.Array.merge(columns, this._getBaseRightColumns());

        return columns;
    },

    getRankValue: function(record, gridStore) {
        var store = (gridStore && gridStore.treeStore) || gridStore,
            sorters = store && store.getSorters(),
            sorter = sorters && sorters[1];

        if (sorter && Rally.data.Ranker.isRankField(sorter.property)) {
            var index = store.indexOf(record);
            if (index !== -1) {
                var currentPage = store.currentPage ? store.currentPage : 1;
                var offset = store.pageSize * (currentPage-1);

                return sorter.direction === 'ASC' ? index + offset + 1 : store.getTotalCount() - offset - index;
            }
        }
        return '';
    },

    getPickableColumns: function() {
        var columns = [],
            me = this;

        columns.push({
            dataIndex: 'DragAndDropRank',
            text: 'Rank',
            width: 50,
            editor: null,
            hidden: false,
            menuDisabled: true,
            renderer: function(value, meta, record, rowIndex, colIndex, gridStore, view) {
                return me.getRankValue(record,gridStore);
            }
        });

        columns.push({
            dataIndex: 'Project',
            text: 'Project',
            flex: 1,
            editor: null,
            sortable: false,
            hidden: false,
            menuDisabled: true,
            renderer: function(value, meta, record) {
                if ( Ext.isEmpty(value) ) {
                    return '--';
                }
                return value._refObjectName;
            }
        });

        columns.push({
            dataIndex: 'WorkProductOID',
            text: 'Work Item',
            flex: 1,
            editor: null,
            sortable: true,
            menuDisabled: true,
            renderer: function(value, meta, record) {
                if ( value < 0 ) {
                    return '--';
                }
                return Ext.String.format("<a target='_blank' href='{0}'>{1}</a>: {2}",
                    Rally.nav.Manager.getDetailUrl(record.get('WorkProduct')),
                    record.get('WorkProduct').FormattedID,
                    record.get('WorkProduct').Name
                );;
            }
        });

        columns.push({
            dataIndex: 'WorkProductFID',
            text: 'Work Item ID',
            flex: 1,
            editor: null,
            hidden: true,
            menuDisabled: true,
            sortable: true,
            renderer: function(value, meta, record) {
                if ( value < 0 ) {
                    return '--';
                }
                return Ext.String.format("<a target='_blank' href='{0}'>{1}</a>",
                    Rally.nav.Manager.getDetailUrl(record.get('WorkProduct')),
                    record.get('WorkProduct').FormattedID
                );;
            }
        });

        columns.push({
            dataIndex: 'WorkProductName',
            text: 'Work Item Name',
            hidden: true,
            flex: 1,
            editor: null,
            menuDisabled: true,
            sortable: true
        });

        var d_state_config = {
            dataIndex: 'WorkProductState',
            text: 'Defect State',
            sortable: true,
            field: 'WorkProduct',
            menuDisabled: true,
 
            getEditor: function(record,df) {
                 if (record.get('WorkProduct')._type != 'Defect') {
                    return false;
                }
                var minValue = 0;
                return Ext.create('Ext.grid.CellEditor', {
                    field: Ext.create('Rally.ui.combobox.FieldValueComboBox', {
                        xtype:'rallyfieldvaluecombobox',
                        model: 'Defect',
                        field: 'State',
                        value: record.get('WorkProduct').State,
                        listeners: {
                            change: function(field, new_value, old_value) {
                                if ( Ext.isEmpty(new_value) ) {
                                   return;
                                }
                                record.set(('WorkProduct').State, new_value);
                                record.save();
 
                            }
                        }
                    })
                });
            },

        };

        columns.push(d_state_config);

        // columns.push({
        //     dataIndex: 'WorkProductState',
        //     text: 'Defect State',
        //     sortable: true,
        //     width: 50,
        //     hidden: true,
        //     menuDisabled: true,
        //     editor: null
        // });

        columns.push({
            dataIndex: 'WorkProductPriority',
            text: 'Priority',
            sortable: true,
            width: 50,
            hidden: true,
            menuDisabled: true,
            editor: null
        });

        if (Ext.isEmpty(this.lowestLevelPIName)) {
            columns.push({
                dataIndex: 'PortfolioItemOID',
                text: 'Portfolio Item',
                flex: 1,
                editor: null,
                sortable: true,
                hidden: true,
                menuDisabled: true,
                renderer: function(value, meta, record) {
                    if ( value < 0 ) {
                        return '--';
                    }
                    return Ext.String.format("<a target='_blank' href='{0}'>{1}</a>: {2}",
                        Rally.nav.Manager.getDetailUrl(record.get('PortfolioItem')),
                        record.get('PortfolioItem').FormattedID,
                        record.get('PortfolioItem').Name
                    );;
                }
            });

            columns.push({
                dataIndex: 'PortfolioItemFID',
                text: 'Portfolio Item ID',
                flex: 1,
                editor: null,
                hidden: true,
                menuDisabled: true,
                sortable: true,
                renderer: function(value, meta, record) {
                    if ( value < 0 ) {
                        return '--';
                    }
                    return Ext.String.format("<a target='_blank' href='{0}'>{1}</a>",
                        Rally.nav.Manager.getDetailUrl(record.get('PortfolioItem')),
                        record.get('PortfolioItem').FormattedID
                    );;
                }
            });

            columns.push({
                dataIndex: 'PortfolioItemName',
                text: 'PortfolioItem Name',
                hidden: true,
                flex: 1,
                editor: null,
                menuDisabled: true,
                sortable: true
            });

        } else {
            columns.push({
                dataIndex: 'PortfolioItemOID',
                text: this.lowestLevelPIName,
                flex: 1,
                editor: null,
                sortable: true,
                hidden: true,
                menuDisabled: true,
                renderer: function(value, meta, record) {
                    if ( value < 0 ) {
                        return '--';
                    }
                    return Ext.String.format("<a target='_blank' href='{0}'>{1}</a>: {2}",
                        Rally.nav.Manager.getDetailUrl(record.get('PortfolioItem')),
                        record.get('PortfolioItem').FormattedID,
                        record.get('PortfolioItem').Name
                    );;
                }
            });

            columns.push({
                dataIndex: 'PortfolioItemFID',
                text: this.lowestLevelPIName + ' ID',
                flex: 1,
                editor: null,
                hidden: true,
                menuDisabled: true,
                sortable: true,
                renderer: function(value, meta, record) {
                    if ( value < 0 ) {
                        return '--';
                    }
                    return Ext.String.format("<a target='_blank' href='{0}'>{1}</a>",
                        Rally.nav.Manager.getDetailUrl(record.get('PortfolioItem')),
                        record.get('PortfolioItem').FormattedID
                    );;
                }
            });

            columns.push({
                dataIndex: 'PortfolioItemName',
                text: this.lowestLevelPIName + ' Name',
                hidden: true,
                flex: 1,
                editor: null,
                menuDisabled: true,
                sortable: true
            });
        }

        columns.push({
            dataIndex: 'Iteration',
            text: 'Iteration',
            editor: null,
            sortable: false,
            menuDisabled: true,
            renderer: function(value,meta,record){
                if ( Ext.isEmpty(value) ){
                    return "--";
                }
                return value._refObjectName;
            }
        });

        columns.push({
            dataIndex: 'TaskOID',
            text: 'Task',
            sortable: true,
            flex: 1,
            menuDisabled: true,
            editor: null,
            renderer: function(value, meta, record) {
                if ( value < 0 ) {
                    return '--';
                }
                return Ext.String.format("<a target='_blank' href='{0}'>{1}</a>: {2}",
                    Rally.nav.Manager.getDetailUrl(record.get('Task')),
                    record.get('Task').FormattedID,
                    record.get('Task').Name
                );;
            }
        });

        columns.push({
            dataIndex: 'TaskFID',
            text: 'Task ID',
            sortable: true,
            flex: 1,
            hidden: true,
            menuDisabled: true,
            editor: null,
            renderer: function(value, meta, record) {
                if ( value < 0 ) {
                    return '--';
                }
                return Ext.String.format("<a target='_blank' href='{0}'>{1}</a>",
                    Rally.nav.Manager.getDetailUrl(record.get('Task')),
                    record.get('Task').FormattedID
                );;
            }
        });

        columns.push({
            dataIndex: 'TaskName',
            text: 'Task Name',
            sortable: true,
            flex: 1,
            hidden: true,
            menuDisabled: true,
            editor: null
        });

        var state_config = {
            dataIndex: 'State',
            text: 'State',
            resizable: false,
            align: 'left',
            field: 'test',
            sortable: true,
            menuDisabled: true,

            getEditor: function(record,df) {
                if ( Ext.isEmpty(record.get('Task') ) ) {
                    return false;
                }
                var minValue = 0;
                return Ext.create('Ext.grid.CellEditor', {
                    field: Ext.create('Rally.ui.combobox.FieldValueComboBox', {
                        xtype:'rallyfieldvaluecombobox',
                        model: 'Task',
                        field: 'State',
                        value: record.get('Task').State,
                        listeners: {
                            change: function(field, new_value, old_value) {
                                if ( Ext.isEmpty(new_value) ) {
                                   return;
                                }
                                record.set('State', new_value);
                                record.save();
                            }
                        }
                    })
                });
            },
            renderer: function (value, metaData, record) {
                if ( Ext.isEmpty(record.get('Task') ) ) {
                    return '--';
                }
                tpl = Ext.create('Rally.ui.renderer.template.ScheduleStateTemplate',{field: me.taskState});
                return tpl.apply(record.get('Task'));
            }
        };

        columns.push(state_config);

        columns.push({
            dataIndex: 'Est',
            text: 'Estimate',
            sortable: true,
            width: 50,
            hidden: true,
            menuDisabled: true,
            editor: null
        });

        var todo_config = {
            dataIndex: 'ToDo',
            text: 'To Do',
            width: 50,
            resizable: false,
            align: 'center',
            field: 'test',
            sortable: true,
            menuDisabled: true,
            summaryType: 'sum',
            getEditor: function(record,df) {
                if ( Ext.isEmpty(record.get('Task') ) ) {
                    return false;
                }
                var minValue = 0;
                return Ext.create('Ext.grid.CellEditor', {
                    field: Ext.create('Rally.ui.NumberField', {
                        xtype:'rallynumberfield',
                        minValue: minValue,
                        selectOnFocus: true,
                        listeners: {
                            change: function(field, new_value, old_value) {
                                if ( Ext.isEmpty(new_value) ) {
                                    field.setValue(0);
                                }
                                record.set('ToDo', new_value);
                                record.save();
                            }
                        }
                    })
                });
            },
            renderer: function(value,meta,record){
                meta.tdCls = "ts-right-border";
                return value > 0 ? value : "";
            }
        };

        columns.push(todo_config);

        if ( ! this.pickableColumns ) { return columns; }

        var pickable_by_index = {};
        Ext.Array.each(this.pickableColumns, function(column){
            pickable_by_index[column.dataIndex] = column;
        });

        return Ext.Array.map(columns, function(column){
            var pickable = pickable_by_index[column.dataIndex];
            if ( Ext.isEmpty(pickable) ) { return column; }

            if ( pickable.hidden ) {
                column.hidden = true;
            } else {
                column.hidden = false;
            }
            return column;

        });
    },

    _getBaseLeftColumns: function() {
        var me = this;

        var columns = [
            {
                xtype:'rallyrowactioncolumn',
                sortable: false,
                scope: me,
                rowActionsFn: function (record) {
                    return me._getRowActions(record);
                }
            },
            {
                text: ' ',
                width: 25,
                dataIndex: '__SecretKey',
                renderer: function(value,meta,record) {
                    var icons = "";

                    if ( record.hasOpenDetails() ) {
                        icons = icons + "<span class='icon-calendar'></span>";
                    }
                    return icons;
                }
            }
        ];

        return columns;
    },

    _getBaseRightColumns: function() {
        var me = this;
        var columns = [];

        Ext.Array.each( CA.techservices.timesheet.TimeRowUtils.getOrderedDaysBasedOnWeekStart(this.weekStart), function(day,idx) {
            columns.push(this._getColumnForDay(day,idx));
        },this);

        var total_renderer = function(value, meta, record) {
            meta.tdCls = "ts-total-cell";
            return value;
        };

        columns.push({
            dataIndex:'Total',
            text:'Total',
            width: 50,
            resizable: false,
            align: 'center',
            editor: null,
            summaryType: 'sum',
            renderer: total_renderer
        });

        return columns;
    },

    _getItemOIDFromRow: function(record) {
        var record_item = record.get('Task') || record.get('WorkProduct');
        var oid = record_item.ObjectID;
        return oid;
    },

    _unpinRecord: function(record) {
        record.set('Pinned',false);
        var oid = this._getItemOIDFromRow(record);
        var key = Ext.String.format("{0}.{1}",
            this.pinKey,
            oid
        );

        var settings = {};
        var value = {};
        value[oid] = false;

        settings[key] = Ext.JSON.encode( value );

        Rally.data.PreferenceManager.update({
            user: Rally.getApp().getContext().getUser().ObjectID,
            filterByUser: true,
            settings: settings,
            success: function(updatedRecords, notUpdatedRecords) {
                //yay!
            }
        });

    },

    _pinRecord: function(record) {
        record.set('Pinned',true);
        var record_item = record.get('Task') || record.get('WorkProduct');
        var oid = this._getItemOIDFromRow(record);
        var key = Ext.String.format("{0}.{1}",
            this.pinKey,
            oid
        );

        var settings = {};
        var value = {};
        value[oid] = record_item._type;

        settings[key] = Ext.JSON.encode( value );

        Rally.data.PreferenceManager.update({
            user: Rally.getApp().getContext().getUser().ObjectID,
            filterByUser: true,
            settings: settings,
            success: function(updatedRecords, notUpdatedRecords) {
                //yay!
            }
        });
    },

    _getColumnForDay: function(day,idx) {
        var disabled = false;

        console.log('day/idx', day, idx);
        var today = new Date();
        var end_date = Ext.Date.add(this.startDate, Ext.Date.DAY, 7);
        var indexToday = today.getDay();

        console.log(this.startDate,today,end_date);
        var weekdays = CA.techservices.timesheet.TimeRowUtils.getOrderedDaysBasedOnWeekStart(0);

        //console.log('indexToday, weekdays',indexToday, weekdays, weekdays[indexToday], day);

        var editor_config = function(record,df) {
            var minValue = 0;
            return Ext.create('Ext.grid.CellEditor', {
                field: Ext.create('Rally.ui.NumberField', {
                    xtype:'rallynumberfield',
                    minValue: minValue,
                    maxValue: 24,
                    disabled: disabled,
                    selectOnFocus: true,
                    keyNavEnabled: false,
                    mouseWheelEnabled: false,
                    spinDownEnabled: false,
                    spinUpEnabled: false
                }),
                listeners: {
                    complete: function(field, new_value, old_value) {
                        if ( Ext.isEmpty(new_value) ) {
                            new_value = 0;
                            field.setValue(new_value);
                        }
                        //console.log('change', day, new_value);
                        record.set(day, new_value);
                        record.save();
                    }
                }
            });
        };

        var moment_utc_start = moment(this.startDate).utc();
        var moment_utc_days_later = moment_utc_start.add(idx,'day').utc();

        var header_text = Ext.String.format("{0}<br/>{1}",
            CA.techservices.timesheet.TimeRowUtils.dayShortNames[day],
            moment_utc_days_later.format('D MMM')
        );

        var config = {
            dataIndex:day,
            html: header_text,
            width: 50,
            resizable: false,
            sortable: true,
            align: 'center',
            getEditor: editor_config,
            field: 'test',
            summaryType: 'sum',
            renderer: function(value,meta,record) {
                if ( value === 0 ) {
                    return "";
                }
                return value;
            },
            summaryRenderer: function(value,meta,record) {
                if ( value === 0 ) {
                    return "";
                }
                return Ext.util.Format.number(value,"0.00");
            }
        };

        //Highlight today
        if ( (day == weekdays[indexToday]) && (this.startDate < today) && (today < end_date)) {
            config.renderer = function(value, meta, record) {
                meta.tdCls = "ts-total-cell";
                if ( value === 0 ) {
                    return "";
                }
                return value;
            };
        }

        if ( day == "Saturday" || day == "Sunday" ) {
            config.renderer = function(value, meta, record) {
                meta.tdCls = "ts-weekend-cell";
                if ( value === 0 ) {
                    return "";
                }
                return value;
            };
        }

        return config;
    },

    _getTimeEntryItemSets: function(time_entry_items) {
        var time_entry_item_sets = {};
        Ext.Array.each(time_entry_items, function(item){
            var oid = item.get('Task') && item.get('Task').ObjectID;
            if ( Ext.isEmpty(oid) ) {
                oid = item.get('WorkProduct') && item.get('WorkProduct').ObjectID;
            }
            if ( Ext.isEmpty(oid) ) {
                oid = item.get('Project') && item.get('Project').ObjectID;
            }

            if ( Ext.isEmpty(time_entry_item_sets[oid]) ) {
                time_entry_item_sets[oid] = [];
            }
            time_entry_item_sets[oid].push(item);
        });

        return Ext.Object.getValues(time_entry_item_sets);
    },

    _createRows: function(time_entry_items, time_entry_values, time_detail_prefs) {
        var rows = [],
            me = this;
        // in Rally, a time row has to start on Sunday, so we'll have up to two
        // time entry items for every row if the week starts on a different day
        var time_entry_item_sets = this._getTimeEntryItemSets(time_entry_items);

        Ext.Array.each(time_entry_item_sets, function(item_set){
            var item_values = [];

            Ext.Array.each(item_set, function(time_entry_item) {
                var oid = time_entry_item.get('ObjectID');
                var values_for_time_entry_item =  Ext.Array.filter(time_entry_values, function(time_entry_value){
                    return time_entry_value.get('TimeEntryItem').ObjectID == oid;
                });

                item_values = Ext.Array.push(item_values, values_for_time_entry_item);
            });

            var item_oid = CA.techservices.timesheet.TimeRowUtils.getItemOIDFromTimeEntryItem(item_set[0]);
            var detail_preference = null;
            Ext.Array.each(time_detail_prefs, function(pref) {
                var name_array = pref.get('Name').split('.');
                if ( "" + item_oid == name_array[name_array.length-1] ) {
                    detail_preference = pref;
                }
            });

            // switch to Feature instead of PI (so it's not just direct kids)
            if ( !Ext.isEmpty(me.lowestLevelPIName) ) {
                Ext.Object.each(item_set, function(key,item){
                    console.log(item);
                    if ( item.get('WorkProduct') && item.get('WorkProduct')[me.lowestLevelPIName] ) {
                        var workproduct = item.get('WorkProduct');
                        workproduct.PortfolioItem = item.get('WorkProduct')[me.lowestLevelPIName];
                        item.set('WorkProduct', workproduct);
                    }
                });
            }

            var config = {
                WeekStartDate: me.startDate,
                TimeEntryItemRecords: item_set,
                TimeEntryValueRecords: item_values
            };

            if ( !Ext.isEmpty(detail_preference) ) {
                config.DetailPreference = detail_preference;
            }
            if ( me.time_entry_defaults[item_oid] && me.time_entry_defaults[item_oid] !== false ) {
                config.Pinned = true;
            }

            var row = Ext.create('CA.techservices.timesheet.TimeRow',config);
            rows.push(row);
        });

        return rows;
    },

    addRowForItem: function(item){
        var me = this,
            rows = this.rows;

        if ( this._hasRowForItem(item) ) {
            this.logger.log("Has row already:", item, item.get('ObjectID') );
            return;
        }

        this.logger.log('Adding row for ', item, item.get('ObjectID'));

        var item_type = item.get('_type');

        var sunday_start = TSDateUtils.getBeginningOfWeekISOForLocalDate(me.startDate);

        var config = {
            WorkProduct: {
                _ref: item.get('_ref')
            },
            WeekStartDate: sunday_start,
            User: {
                _ref: '/usr/' + this.timesheetUser.ObjectID
            }
        };

        if ( item.get('Project') ) {
            config.Project = item.get("Project");
        }

        if ( item_type == "task" ) {
            config.Task = { _ref: item.get('_ref') };
            config.WorkProduct = { _ref: item.get('WorkProduct')._ref };
        }
        Rally.data.ModelFactory.getModel({
            type: 'TimeEntryItem',
            scope: this,
            success: function(model) {
                var tei = Ext.create(model,config);
                tei.save({
                    fetch: me.time_entry_item_fetch,
                    callback: function(result, operation) {
                        var row = Ext.create('CA.techservices.timesheet.TimeRow',{
                            WeekStartDate: me.startDate,
                            TimeEntryItemRecords: [result],
                            TimeEntryValueRecords: []
                        });

                        var item_oid = me._getItemOIDFromRow(row);
                        if ( me.time_entry_defaults[item_oid] && me.time_entry_defaults[item_oid] !== false ) {
                            row.set('Pinned',true);
                        }
                        me.grid.getStore().loadRecords([row], { addRecords: true });
                        me.rows.push(row);
                        me.grid.refresh();
                    }
                });
            }
        });
    },

    getGrid: function() {
        return this.grid;
    },

    _hasRowForItem: function(item) {
        var me = this,
            rows = this.rows,
            hasRow = false,
            item_type = item.get('_type');

        Ext.Array.each(rows, function(row) {
            if ( row ) {
                if ( item_type == 'task' ) {
                    if ( row.get('Task') && row.get('Task')._ref == item.get('_ref') ) {
                        hasRow = true;
                    }
                } else {
                    if ( Ext.isEmpty(row.get('Task')) && row.get('WorkProduct') && row.get('WorkProduct')._ref == item.get('_ref') ) {
                        hasRow = true;
                    }
                }
            }
        });

        return hasRow;
    },

    _launchTimeDetailsDialog: function(row) {
        Ext.create('CA.technicalservices.TimeDetailsDialog',{
            row: row
        });
    },

    _loadTimeEntryItems: function() {
        var me = this;
        this.setLoading('Loading time entry items...');

        var filters = [{property:'User.ObjectID',value:this.timesheetUser.ObjectID}];

        if ( this.weekStart === 0 ) {
            filters.push({property:'WeekStartDate',value:this.startDate});
        } else {
            filters.push({property:'WeekStartDate', operator: '>=', value:Rally.util.DateTime.add(this.startDate, 'day', -6)});
            filters.push({property:'WeekStartDate', operator: '<=', value:Rally.util.DateTime.add(this.startDate,'day',6)});
        }
        var config = {
            model: 'TimeEntryItem',
            context: {
                project: null
            },
            fetch: this.time_entry_item_fetch,
            enableRankFieldParameterAutoMapping:false,
            filters: filters,
            limit: me.maxRows * 2,
            pageSize: me.maxRows * 2
        };

        return TSUtilities.loadWsapiRecords(config);
    },

    _loadTimeEntryValues: function() {
        this.setLoading('Loading time entry values...');

        var filters = [{property:'TimeEntryItem.User.ObjectID',value:this.timesheetUser.ObjectID}];

        if ( this.weekStart === 0 ) {
            filters.push({property:'TimeEntryItem.WeekStartDate',value:this.startDate});
        } else {
            filters.push({property:'TimeEntryItem.WeekStartDate', operator: '>=', value:Rally.util.DateTime.add(this.startDate, 'day', -6)});
            filters.push({property:'TimeEntryItem.WeekStartDate', operator: '<=', value:Rally.util.DateTime.add(this.startDate,'day',6)});
        }

        var config = {
            model: 'TimeEntryValue',
            context: {
                project: null
            },
            fetch: ['DateVal','Hours','TimeEntryItem','ObjectID'],
            filters: filters,
            pageSize: 2000,
            limit: 'Infinity'
        };

        return TSUtilities.loadWsapiRecords(config);
    },

    _loadTimeDetailPreferences: function() {
        this.setLoading('Loading time entry details...');

        var filters = [{property:'Name',operator:'contains',value:CA.techservices.timesheet.TimeRowUtils.getDetailPrefix(this.startDate)}];

        var config = {
            model: 'Preference',
            fetch: ['Name','Value'],
            filters: filters,
            context: {
                project: null
            }
        };

        return TSUtilities.loadWsapiRecords(config);
    }
});
Ext.define("TSTimesheet", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    layout: 'border',

    items: [
        {xtype:'container', itemId:'selector_box', region: 'north',  layout: { type:'hbox' }, minHeight: 25}
    ],

    pickableColumns: null,
    sortedColumn: null,
    direction: '',    
    portfolioItemTypes: [],
    stateful: true,
    stateEvents: ['columnschosen','columnmoved','columnresize','sortchange'],
    stateId: 'CA.technicalservices.timesheet.Settings.4',

    config: {
        defaultSettings: {
            /* 0=sunday, 6=saturday */
            weekStartsOn: 0,
            showAddMyStoriesButton: false,
            showEditTimeDetailsMenuItem: false,
            showTaskStateFilter: true
        }
    },

    getState: function() {
        var me = this,
            state = null;

        state = {
            pickableColumns: this.pickableColumns,
            sortedColumn: this.sortedColumn,
            sortDirection: this.sortDirection
        };
        this.sortedColumn = state.sortedColumn;
        this.sortDirection = state.sortDirection;
        this.state = state;
        this.logger.log('getting state', state);
        return state;
    },

    launch: function() {
        TSUtilities.fetchPortfolioItemTypes().then({
            success: function(types) {
                this.logger.saveForLater = true;
                this.portfolioItemTypes = types;
                this._addSelectors(this.down('#selector_box'));
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem Initiating TimeSheet App', msg);
            },
            scope: this
        });
    },

    _getLowestLevelPIName: function() {
        return this.portfolioItemTypes[0].get('Name');
    },

    _addSelectors: function(container) {
        container.removeAll();
        container.add({xtype:'container',itemId:'add_button_box'});

        container.add({xtype:'container',flex: 1});

        container.add({xtype:'container',itemId:'other_button_box'});

        var week_starts_on = this.getSetting('weekStartsOn');
        this.logger.log('Week Start:', week_starts_on);

        container.add({
            xtype:'tsarroweddate',
            itemId:'date_selector',
            fieldLabel: 'Week Starting',
            listeners: {
                scope: this,
                change: function(dp, new_value) {
                    if ( Ext.isEmpty(new_value) ) { return; }

                    var week_start = TSDateUtils.getBeginningOfWeekForLocalDate(new_value,week_starts_on);
                    if ( week_start !== new_value ) {
                        dp.setValue(week_start);
                    }
                    if ( new_value.getDay() === week_starts_on ) {
                        this.updateData();
                    }
                }
            }
        }).setValue(new Date());
    },

    _addAddButtons: function(container) {
        container.removeAll();

        container.add({
            xtype:'rallybutton',
            text: 'Add My Tasks',
            toolTipText: "(in current iteration + defaults)",
            padding: 2,
            disabled: false,
            listeners: {
                scope: this,
                click: this._addCurrentTasksAndDefaults
            }
        });

        if (this.getSetting('showAddMyStoriesButton')) {
            container.add({
                xtype:'rallybutton',
                text: '+ my <span class="icon-story"> </span>',
                toolTipText: "(add my stories)",
                padding: 2,
                disabled: false,
                listeners: {
                    scope: this,
                    click: this._addCurrentStories
                }
            });
        }

        container.add({
            xtype:'rallybutton',
            text: '+<span class="icon-task"> </span>',
            disabled: false,
            toolTipText: "Search and add Tasks",
            listeners: {
                scope: this,
                click: this._findAndAddTask
            }
        });

        container.add({
            xtype:'rallybutton',
            text: '+<span class="icon-story"> </span>',
            toolTipText: "Search and add User Stories",
            disabled: false,
            listeners: {
                scope: this,
                click: this._findAndAddStory
            }
        });

        if ( this.getSetting('showTaskStateFilter') ) {
            container.add({
                xtype: 'rallyfieldvaluecombobox',
                model: 'Task',
                field: 'State',
                fieldLabel: 'State:',
                labelAlign: 'right',
                stateful: true,
                stateId:'task-state-filter-combo',
                multiSelect:true,
                value: ["Defined", "In-Progress", "Completed"],
                listeners: {
                    scope: this,
                    change: this._filterState
                }
            });
        }
    },

    _filterState: function(stateChange){
        var timetable = this.down('tstimetable');

        var stateFilter = new Ext.util.Filter({
            filterFn: function(item) {
                return  Ext.Array.contains(stateChange.value,item.get('State')) ||  !item.get('State');
            }
        });

        if(stateChange.value.length > 0){
            timetable.grid.filter(stateFilter);
        }else{
            timetable.grid.filter(null, true);
        }
    },

    _addConfigButtons: function(container) {
        this.pickableColumns = this.time_table.getPickableColumns();
        container.removeAll();

        container.add({
            xtype:'tscolumnpickerbutton',
            pickableColumns: this.pickableColumns,
            listeners: {
                scope: this,
                columnschosen: function(button,columns) {
                    var timetable = this.down('tstimetable');
                    this.pickableColumns = columns;

                    timetable.setPickableColumns(columns);
                    this.fireEvent('columnschosen');
                }
            }
        });
    },

    // my workproducts are stories I own and stories that have tasks I own
    _addCurrentStories: function() {
        var me = this;
        var timetable = this.down('tstimetable');
        if ( !timetable ) { return; }

        this.setLoading("Finding my current stories...");

        var my_filters = Rally.data.wsapi.Filter.or([
            {property:'Owner.ObjectID',value:this.getContext().getUser().ObjectID},
            {property:'Tasks.Owner.ObjectID',value:this.getContext().getUser().ObjectID}
        ]);

        var current_filters = Rally.data.wsapi.Filter.and([
            {property:'Iteration.StartDate',operator: '<=', value:Rally.util.DateTime.toIsoString(this.startDate)},
            {property:'Iteration.EndDate',  operator: '>=', value:Rally.util.DateTime.toIsoString(this.startDate)}
        ]);

        var config = {
            model: 'HierarchicalRequirement',
            context: {
                project: null
            },
            fetch:  ['ObjectID','Name','FormattedID','WorkProduct','Project'],
            filters: current_filters.and(my_filters)
        };

        TSUtilities.loadWsapiRecords(config).then({
            scope: this,
            success: function(items) {
                var new_item_count = items.length;
                var current_count  = timetable.getGrid().getStore().getTotalCount();

                if ( current_count + new_item_count > me.getSetting('maxRows') ) {
                    Ext.Msg.alert('Problem Adding Items', 'Cannot add items to grid. Limit is ' + me.getSetting('maxRows') + ' lines in the time sheet.');
                    this.setLoading(false);
                } else {
                    Ext.Array.each(items, function(item){
                        timetable.addRowForItem(item);
                    });
                }

                this.setLoading(false);
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem with my stories', msg);
            }
        });
    },

    _addCurrentTasksAndDefaults: function() {
        var me = this;
        this.logger.log('_addCurrentTasksAndDefaults');

        Deft.Chain.sequence([
            this._addCurrentTasks,
            this._addDefaults
        ],this).then({
            failure: function(msg) {
                Ext.Alert.msg('Problem adding current items', msg);
            }
        }).always(function() { me.setLoading(false); });
    },

    _addDefaults: function() {
        var timetable = this.down('tstimetable'),
            me = this;
        if ( !timetable ) { return; }

        var defaults = timetable.time_entry_defaults;

        var promises = [];
        this.setLoading('Finding my defaults...');

        this.logger.log('finding defaults: ');

        Ext.Object.each(defaults, function(oid,type){
            me.logger.log('  ', oid, type);

            if ( type == false ) {
                return;
            }

            promises.push(function() {
                var deferred = Ext.create('Deft.Deferred');

                var config = {
                    model: type,
                    context: {
                        project: null
                    },
                    fetch:  ['ObjectID','Name','FormattedID','WorkProduct','Project'],
                    filters: [
                        {property:'ObjectID', value: oid}
                    ]
                };

                TSUtilities.loadWsapiRecords(config).then({
                    scope: this,
                    success: function(items) {
                        var new_item_count = items.length;
                        var current_count  = timetable.getGrid().getStore().getTotalCount();

                        if ( current_count + new_item_count > me.getSetting('maxRows') ) {
                            Ext.Msg.alert('Problem Adding Items', 'Cannot add items to grid. Limit is '+me.getSetting('maxRows')+' lines in the time sheet.');
                            me.setLoading(false);
                        } else {
                            Ext.Array.each(items, function(task){
                                timetable.addRowForItem(task);
                            });
                        }

                        me.logger.log('Found ', items.length, type, ' items');
                        me.setLoading(false);
                        deferred.resolve(items);
                    },
                    failure: function(msg) {
                        deferred.reject(msg);
                    }
                });

                return deferred.promise;
            });
        });

        return Deft.Chain.sequence(promises);
    },

    _addCurrentTasks: function() {
        var me = this;
        var deferred = Ext.create('Deft.Deferred');

        var timetable = this.down('tstimetable');
        if ( !timetable ) { return; }

        this.setLoading("Finding my current tasks...");

        var config = {
            model: 'Task',
            context: {
                project: null
            },
            fetch:  ['ObjectID','Name','FormattedID','WorkProduct','Project'],
            filters: [
                {property:'Owner.ObjectID',value:this.getContext().getUser().ObjectID},
                {property:'Iteration.StartDate',operator: '<=', value:Rally.util.DateTime.toIsoString(this.startDate)},
                {property:'Iteration.EndDate',  operator: '>=', value:Rally.util.DateTime.toIsoString(this.startDate)}
            ]
        };

        TSUtilities.loadWsapiRecords(config).then({
            scope: this,
            success: function(tasks) {
                var new_item_count = tasks.length;
                var current_count  = timetable.getGrid().getStore().getTotalCount();

                if ( current_count + new_item_count > me.getSetting('maxRows') ) {
                    Ext.Msg.alert('Problem Adding Items', 'Cannot add items to grid. Limit is '+me.getSetting('maxRows')+' lines in the time sheet.');
                    this.setLoading(false);
                } else {
                    Ext.Array.each(tasks, function(task){
                        timetable.addRowForItem(task);
                    });
                }

                this.logger.log('Found ', tasks.length, ' tasks in current iterations');

                this.setLoading(false);
                deferred.resolve(tasks);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });

        return deferred.promise;
    },

    _findAndAddTask: function() {
        var me = this;
        var timetable = this.down('tstimetable');

        var fetch_fields = ['WorkProduct','Feature','Project','Name','FormattedID','ObjectID'];

        if (timetable) {
            Ext.create('Rally.technicalservices.ChooserDialog', {
                artifactTypes: ['task'],
                autoShow: true,
                multiple: true,
                title: 'Choose Task(s)',
                filterableFields: [
                    {
                        displayName: 'Formatted ID',
                        attributeName: 'FormattedID'
                    },
                    {
                        displayName: 'Name',
                        attributeName: 'Name'
                    },
                    {
                        displayName:'WorkProduct',
                        attributeName: 'WorkProduct.Name'
                    },
                    {
                        displayName:'Release',
                        attributeName: 'Release'
                    },
                    {
                        displayName:'Iteration',
                        attributeName: 'Iteration'
                    },
                    {
                        displayName:'Project',
                        attributeName: 'Project.Name'
                    },
                    {
                        displayName:'Owner',
                        attributeName: 'Owner'
                    },
                    {
                        displayName: 'State',
                        attributeName: 'State'
                    }
                ],
                columns: [
                    {
                        text: 'ID',
                        dataIndex: 'FormattedID'
                    },
                    'Name',
                    'WorkProduct',
                    'Iteration',
                    'Release',
                    'Project',
                    'Owner',
                    'State'
                ],
                fetchFields: fetch_fields,
                listeners: {
                    artifactchosen: function(dialog, selectedRecords){
                        if ( !Ext.isArray(selectedRecords) ) {
                            selectedRecords = [selectedRecords];
                        }

                        var new_item_count = selectedRecords.length;
                        var current_count  = timetable.getGrid().getStore().getTotalCount();

                        if ( current_count + new_item_count > me.getSetting('maxRows') ) {
                            Ext.Msg.alert('Problem Adding Tasks', 'Cannot add items to grid. Limit is '+me.getSetting('maxRows')+' lines in the time sheet.');
                        } else {

                            Ext.Array.each(selectedRecords, function(selectedRecord){
                                timetable.addRowForItem(selectedRecord);
                            });
                        }
                    },
                    scope: this
                }
             });
        }
    },

    _findAndAddStory: function() {
        var me = this;
        var timetable = this.down('tstimetable');
        if (timetable) {
            Ext.create('Rally.technicalservices.ChooserDialog', {
                artifactTypes: ['hierarchicalrequirement','defect'],
                autoShow: true,
                title: 'Choose Work Product(s)',
                multiple: true,
                filterableFields: [
                    {
                        displayName: 'Formatted ID',
                        attributeName: 'FormattedID'
                    },
                    {
                        displayName: 'Name',
                        attributeName: 'Name'
                    },
                    {
                        displayName:'Feature',
                        attributeName: 'Feature.Name'
                    },
                    {
                        displayName: 'Feature Project',
                        attributeName: 'Feature.Project.Name'
                    },
                    {
                        displayName:'Iteration',
                        attributeName: 'Iteration'
                    },
                    {
                        displayName:'Release',
                        attributeName: 'Release'
                    },
                    {
                        displayName:'Project',
                        attributeName: 'Project.Name'
                    },
                    {
                        displayName:'Owner',
                        attributeName: 'Owner'
                    },
                    {
                        displayName:'State',
                        attributeName: 'ScheduleState'
                    }
                ],
                columns: [
                    {
                        text: 'ID',
                        dataIndex: 'FormattedID'
                    },
                    'Name',
                    'Iteration',
                    'Release',
                    'Project',
                    'Owner',
                    'ScheduleState'
                ],

                fetchFields: ['WorkProduct','Feature','Project','Name','FormattedID','ObjectID','Release'],

                listeners: {
                    artifactchosen: function(dialog, selectedRecords){
                        if ( !Ext.isArray(selectedRecords) ) {
                            selectedRecords = [selectedRecords];
                        }

                        var new_item_count = selectedRecords.length;
                        var current_count  = timetable.getGrid().getStore().getTotalCount();

                        if ( current_count + new_item_count > me.getSetting('maxRows') ) {
                            Ext.Msg.alert('Problem Adding Stories', 'Cannot add items to grid. Limit is '+me.getSetting('maxRows')+' lines in the time sheet.');
                        } else {
                            Ext.Array.each(selectedRecords, function(selectedRecord){
                                timetable.addRowForItem(selectedRecord);
                            });
                        }
                    },
                    scope: this
                }
             });
        }
    },

    updateData: function() {
        var me = this;
        var timetable  = this.down('tstimetable');
        if ( ! Ext.isEmpty(timetable) ) { timetable.destroy(); }

        this.startDate = this.down('#date_selector').getValue();

        this.logger.log('startDate', this.startDate);

        var editable = true;

        this.time_table = this.add({
            xtype: 'tstimetable',
            region: 'center',
            layout: 'fit',
            margin: 15,
            pickableColumns: this.pickableColumns,
            sortedColumn: this.sortedColumn,
            sortDirection: this.sortDirection,            
            lowestLevelPIName: this._getLowestLevelPIName(),
            startDate: this.startDate,
            editable: editable,
            logger: me.logger,
            maxRows: me.getSetting('maxRows'),
            showEditTimeDetailsMenuItem: me.getSetting('showEditTimeDetailsMenuItem'),
            listeners: {
                scope: this,
                gridReady: function() {
                    this._addAddButtons(this.down('#add_button_box'));
                    this._addConfigButtons(this.down('#other_button_box'));
                },
                sortchange: function(grid, dataIndex, direction) {
                    this.sortedColumn = dataIndex;
                    this.sortDirection = direction;
                    me.fireEvent('sortchange', this, dataIndex, direction);
                }
            }
        });
    },

    getSettingsFields: function() {
        var check_box_margins = '5 0 5 0';

        var days_of_week = [
            {Name:'Sunday', Value:0},
            {Name:'Monday', Value:1},
            {Name:'Tuesday', Value:2},
            {Name:'Wednesday', Value:3},
            {Name:'Thursday', Value:4},
            {Name:'Friday', Value:5},
            {Name:'Saturday', Value:6}
        ];

        return [{
            name: 'weekStartsOn',
            xtype: 'rallycombobox',
            fieldLabel: 'Week Starts On',
            labelWidth: 100,
            labelAlign: 'left',
            minWidth: 200,
            displayField:'Name',
            valueField: 'Value',
            value: this.getSetting('weekStartsOn'),
            store: Ext.create('Rally.data.custom.Store',{
                data: days_of_week
            }),

            readyEvent: 'ready'
        },
        {
            name: 'showTaskStateFilter',
            xtype: 'rallycheckboxfield',
            boxLabelAlign: 'after',
            fieldLabel: '',
            margin: check_box_margins,
            boxLabel: 'Show the Task State Filter<br/><span style="color:#999999;"><i>User can limit display of tasks to ones in particular states (does not affect other object types).</i></span>'
        },
        {
            name: 'showAddMyStoriesButton',
            xtype: 'rallycheckboxfield',
            boxLabelAlign: 'after',
            fieldLabel: '',
            margin: check_box_margins,
            boxLabel: 'Show the Add My Stories Button<br/><span style="color:#999999;"><i>User can add stories in a current sprint that they own or that have tasks they own (does not look for default items).</i></span>'
        },
        {
            name: 'showEditTimeDetailsMenuItem',
            xtype: 'rallycheckboxfield',
            boxLabelAlign: 'after',
            fieldLabel: '',
            margin: check_box_margins,
            boxLabel: 'Include Time Details Option in Menu (Experimental)<br/><span style="color:#999999;"><i>User can enter time ranges during the day to calculate time entry. </i></span>'

        },
        {
            xtype: 'rallynumberfield',
            name: 'maxRows',
            labelWidth: 100,
            labelAlign: 'left',
            width: 200,
            maxValue: 1000,
            minValue:10,
            fieldLabel: 'Maximum number of rows',
            value: this.getSetting('maxRows') || 100,
        }
        ];
    },

    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            },
            {
                text: 'Show Log',
                handler: this._showLog,
                scope: this
            }
        ];
    },

    _showLog: function() {
        var text = this.logger.getLogText();

        this.popup = Ext.create('Rally.ui.dialog.Dialog', {
            width      : Ext.getBody().getWidth() - 20,
            height     : Ext.getBody().getHeight() - 20,
            closable   : true,
            title      : 'Log',
            autoShow   : true,
            layout     : 'border',
            defaults   : {
                layout : 'fit',
                width  : '50%',
                border : false
            },
            items: [{
                region : 'center',
                xtype: 'rallyrichtexteditor',
                value: text,
                height: Ext.getBody().getHeight() - 20
            }]
        });
    },

    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },

    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },

    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('TSTimesheet', {
                   name: 'CATS-Timesheet-1.2'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
.x-btn-tsnav-small {
    background-image: none;
    background-color: white;
    border-color: white !important;
    text-decoration: none;
}
.no-border {
    border-style: none;
    color: red !important;
    background-color: white !important ;
}

.no-border .x-btn-inner {
    color: red !important;
    background-color: white !important ;
}


td.ts-total-cell {
    background-color: #eee !important;
}

.x-grid-row-summary {
    background-color: #eee;
}

.x-grid-row-alt .x-grid-td {
    background-color: #fff;
}

.x-border-layout-ct {
    background-color: #ffffff;
}

td.ts-weekend-cell {
    background-color: #B0E0E6 !important;
}

span.red {
    color: red;
}

td.ts-right-border {
    border-style: solid;
    border-right: thick double #aaa;
}
    </style>

</head>
<body></body>
</html>